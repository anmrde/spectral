{"version":3,"sources":["formatters/global.js","formatters/array.js","formatters/number.js","formatters/string.js","formatters/object.js","formatters/boolean.js","formatters/undefined.js","formatters/null.js"],"names":["dmx","Formatters","default","value","defaultValue","string","String","number","Number","date","toLowerCase","Date","toString","toISOString","toKeyedObject","array","key","newObj","ai","length","hasItems","contains","indexOf","join","separator","count","top","slice","last","begin","end","reverse","randomize","t","r","rnd","randomizer","this","seed","hashCode","i","Math","floor","filter","expression","repeatItems","item","parse","DataScope","map","where","prop","operator","val","substr","search","stringLen","searchLen","outer","j","char","charCodeAt","values","groupBy","reduce","obj","push","unique","Object","keys","JSON","stringify","sort","a","b","min","Infinity","max","sum","avg","inRange","abs","ceil","pow","exponent","per","amount","perOf","total","round","precision","factor","temp","pad","neg","str","toFixed","decimals","formatNumber","delimiter","isNaN","isFinite","x","split","x1","x2","re","test","replace","formatPercentage","formatCurrency","unit","formatSize","binary","base","suffix","n","toDate","formatLocalDate","pad2","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","parseDate","struct","d","offset","exec","k","undefined","UTC","setHours","setMinutes","setSeconds","resetTime","setMilliseconds","startsWith","endsWith","pos","index","lastIndexOf","notContains","matchAll","word","fuzzySearch","regexp","lowercase","uppercase","toUpperCase","slugify","2d","20","24","26","30","31","32","33","34","35","36","37","38","39","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","363","364","365","366","367","368","369","386","388","389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426","427","428","429","430","431","432","433","434","435","436","437","438","439","440","441","442","443","444","445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470","471","472","473","474","475","476","477","478","479","480","481","490","491","492","493","494","495","496","497","498","499","500","501","502","503","504","505","506","507","508","509","510","511","512","513","514","515","531","532","533","534","535","536","537","538","539","540","541","542","543","544","545","546","547","548","549","550","551","552","553","554","555","556","561","562","563","564","565","566","567","568","569","570","571","572","573","574","575","576","577","578","579","580","581","582","583","584","585","586","587","4a","4b","4c","4d","4e","4f","5a","6a","6b","6c","6d","6e","6f","7a","a2","a3","a5","a7","a9","aa","ae","b2","b3","b5","b6","b9","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f8","f9","fa","fb","fc","fd","ff","10a","10b","10c","10d","10e","10f","11a","11b","11c","11d","11e","11f","12a","12b","12c","12d","12e","12f","13a","13b","13c","13d","13e","13f","14a","14b","14c","14d","14e","14f","15a","15b","15c","15d","15e","15f","16a","16b","16c","16d","16e","16f","17a","17b","17c","17d","17e","17f","18a","18b","18c","18d","18e","18f","19a","19b","19c","19d","19e","19f","1a0","1a1","1a2","1a3","1a4","1a5","1a6","1a7","1a8","1a9","1aa","1ab","1ac","1ad","1ae","1af","1b0","1b1","1b2","1b3","1b4","1b5","1b6","1b7","1b8","1b9","1ba","1bb","1bc","1bd","1be","1bf","1c4","1c5","1c6","1c7","1c8","1c9","1ca","1cb","1cc","1cd","1ce","1cf","1d0","1d1","1d2","1d3","1d4","1d5","1d6","1d7","1d8","1d9","1da","1db","1dc","1dd","1de","1df","1e0","1e1","1e2","1e3","1e4","1e5","1e6","1e7","1e8","1e9","1ea","1eb","1ec","1ed","1ee","1ef","1f0","1f1","1f2","1f3","1f4","1f5","1f6","1f7","1f8","1f9","1fa","1fb","1fc","1fd","1fe","1ff","20a","20b","20c","20d","20e","20f","21a","21b","21c","21d","21e","21f","22a","22b","22c","22d","22e","22f","23a","23b","23c","23d","23e","23f","24a","24b","24c","24d","24e","24f","25a","25b","25c","25d","25e","25f","26a","26b","26c","26d","26e","26f","27a","27b","27c","27d","27e","27f","28a","28b","28c","28d","28e","28f","29a","29b","29c","29d","29e","29f","2a0","2a1","2a2","2a3","2a4","2a5","2a6","2a7","2a8","2a9","2aa","2ab","2ac","2ae","2af","2b0","2b1","2b2","2b3","2b4","2b5","2b6","2b7","2b8","2df","2e0","2e1","2e2","2e3","2e4","36a","36b","36c","36d","36e","36f","37b","37c","37d","38a","38c","38e","38f","39a","39b","39c","39d","39e","39f","3a0","3a1","3a3","3a4","3a5","3a6","3a7","3a8","3a9","3aa","3ab","3ac","3ad","3ae","3af","3b0","3b1","3b2","3b3","3b4","3b5","3b6","3b7","3b8","3b9","3ba","3bb","3bc","3bd","3be","3bf","3c0","3c1","3c2","3c3","3c4","3c5","3c6","3c7","3c8","3c9","3ca","3cb","3cc","3cd","3ce","3d0","3d1","3d2","3d3","3d4","3d5","3d6","3d7","3d8","3d9","3da","3db","3dc","3dd","3de","3df","3e2","3e3","3e4","3e5","3e6","3e7","3e8","3e9","3ea","3eb","3ec","3ed","3ee","3ef","3f0","3f1","3f2","3f3","3f4","3f5","3f6","3f7","3f8","3f9","3fa","3fb","3fc","3fd","3fe","3ff","40a","40b","40c","40d","40e","40f","41a","41b","41c","41d","41e","41f","42a","42b","42c","42d","42e","42f","43a","43b","43c","43d","43e","43f","44a","44b","44c","44d","44e","44f","45a","45b","45c","45d","45e","45f","46a","46b","46c","46d","46e","46f","47a","47b","47c","47d","47e","47f","48a","48b","48c","48d","48e","48f","49a","49b","49c","49d","49e","49f","4a0","4a1","4a2","4a3","4a4","4a5","4a6","4a7","4a8","4a9","4aa","4ab","4ac","4ad","4ae","4af","4b0","4b1","4b2","4b3","4b4","4b5","4b6","4b7","4b8","4b9","4ba","4bb","4bc","4bd","4be","4bf","4c0","4c1","4c2","4c3","4c4","4c5","4c6","4c7","4c8","4c9","4ca","4cb","4cc","4cd","4ce","4cf","4d0","4d1","4d2","4d3","4d4","4d5","4d6","4d7","4d8","4d9","4da","4db","4dc","4dd","4de","4df","4e0","4e1","4e2","4e3","4e4","4e5","4e6","4e7","4e8","4e9","4ea","4eb","4ec","4ed","4ee","4ef","4f0","4f1","4f2","4f3","4f4","4f5","4f6","4f7","4f8","4f9","4fa","4fb","4fc","4fd","4fe","4ff","50a","50b","50c","50d","50e","50f","51a","51b","51c","51d","53a","53b","53c","53d","53e","53f","54a","54b","54c","54d","54e","54f","56a","56b","56c","56d","56e","56f","57a","57b","57c","57d","57e","57f","camelize","trim","c","capitalize","dasherize","humanize","underscore","titlecase","camelcase","start","substring","RegExp","escapeRegExp","trimLeft","trimRight","concat","string2","trunc","charsAllowed","useWordBoundary","append","stripTags","padStart","filler","rem","padEnd","repeat","out","wordCount","toNumber","toUTCDate","getYear","getDay","addYears","years","setFullYear","addMonths","months","setMonth","addWeeks","weeks","setDate","addDays","days","addHours","hours","addMinutes","minutes","addSeconds","seconds","yearsUntil","date1","date2","monthsUntil","weeksUntil","daysUntil","hoursUntil","minutesUntil","secondsUntil","timeUntil","includeHours","toISODate","toISOTime","formatDate","format","monthsShort","daysShort","year","month","day","weekday","part","pad4","toTimestamp","getTime","object","hasKey","hasValue","getValueOrKey","bool","then","trueValue","falseValue","o"],"mappings":"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","file":"../dmxFormatter/dmxFormatter.js","sourcesContent":["dmx.Formatters('global', {\r\n\r\n    // default(value:Any, defaultValue:Any):Any\r\n    default: function(value, defaultValue) {\r\n        return value == null ? defaultValue : value;\r\n    },\r\n\r\n    // string(value:Any):String\r\n    string: function(value) {\r\n        return String(value);\r\n    },\r\n\r\n    // number(value:Any):String\r\n    number: function(value) {\r\n        return Number(value);\r\n    },\r\n\r\n    // date(value:Any):String\r\n    date: function(value) {\r\n        if (typeof value == 'number') {\r\n            value *= 1000;\r\n        }\r\n\r\n        if (typeof value == 'string' && value.toLowerCase() == 'now') {\r\n            value = null;\r\n        }\r\n\r\n        var date = value ? new Date(value) : new Date();\r\n\r\n        if (date.toString() == 'Invalid Date') {\r\n            return null;\r\n        }\r\n\r\n        return date.toISOString();\r\n    }\r\n\r\n});\r\n","dmx.Formatters('array', {\r\n\r\n    //toKeyedObject(): object\r\n    toKeyedObject: function(array, key, value) {\r\n        var newObj = {};\r\n        for (var ai=0; ai < array.length; ai++) {\r\n            newObj[array[ai][key]] = array[ai][value];\r\n        }\r\n        return newObj;\r\n    },\r\n\r\n    // hasItems():Boolean\r\n    hasItems: function(array) {\r\n        return !!array.length;\r\n    },\r\n\r\n    // contains(value:Any):Boolean\r\n    contains: function(array, value) {\r\n        return array.indexOf(value) > -1;\r\n    },\r\n\r\n    // join(separator:String):String\r\n    join: function(array, separator) {\r\n        return array.join(separator);\r\n    },\r\n\r\n    // count():Number\r\n    count: function(array) {\r\n        return array.length;\r\n    },\r\n\r\n    // top(count:Number):Array\r\n    top: function(array, count) {\r\n        return array.slice(0, count);\r\n    },\r\n\r\n    // last(count:Number):Array\r\n    last: function(array, count) {\r\n        return array.slice(-count);\r\n    },\r\n\r\n    // slice([begin:Number], [end:Number])\r\n    slice: function(array, begin, end) {\r\n        return array.slice(begin, end);\r\n    },\r\n\r\n    // reverse():Array\r\n    reverse: function(array) {\r\n        return array.slice(0).reverse();\r\n    },\r\n\r\n    // randomize():Array\r\n    randomize: function(array) {\r\n        var rnd = dmx.randomizer(this.seed * dmx.hashCode(array));\r\n        var i = array.length, t, r;\r\n\r\n        array = array.slice(0);\r\n\r\n        while (0 !== i) {\r\n            r = Math.floor(rnd() * i--);\r\n            t = array[i];\r\n            array[i] = array[r];\r\n            array[r] = t;\r\n        }\r\n\r\n        return array;\r\n    },\r\n\r\n    // Collection formatters (requires array with objects in them)\r\n\r\n    // filter(expression:Expression):Array\r\n    filter: function(array, expression) {\r\n        return dmx.repeatItems(array).filter(function(item) {\r\n            return dmx.parse(expression, new dmx.DataScope(item, this));\r\n        }, this);\r\n    },\r\n\r\n    // map(expression:Expression):Array\r\n    map: function(array, expression) {\r\n        return dmx.repeatItems(array).map(function(item) {\r\n            return dmx.parse(expression, new dmx.DataScope(item, this));\r\n        }, this);\r\n    },\r\n\r\n    // where(prop:String, value:String, [operator:String]):Array\r\n    where: function(array, prop, value, operator) {\r\n        operator = operator || '==';\r\n\r\n        return dmx.repeatItems(array).filter(function(item) {\r\n            var val = dmx.parse(prop, new dmx.DataScope(item, this));\r\n\r\n            switch (operator) {\r\n                case 'startsWith': return String(val).indexOf(value) === 0;\r\n                case 'endsWith': return String(val).substr(-value.length) === value;\r\n                case 'contains': return String(val).indexOf(value) !== -1;\r\n                case 'inArray': return value.indexOf(val) !== -1;\r\n                case 'fuzzySearch': return (function(string, search) {\r\n                    var stringLen = string.length;\r\n                    var searchLen = search.length;\r\n                    if (searchLen > stringLen) {\r\n                        return false;\r\n                    }\r\n                    if (searchLen === stringLen) {\r\n                        return string === search;\r\n                    }\r\n                    outer: for (var i = 0, j = 0; i < searchLen; i++) {\r\n                        var char = search.charCodeAt(i);\r\n                        while (j < stringLen) {\r\n                            if (string.charCodeAt(j++) === char) {\r\n                                continue outer;\r\n                            }\r\n                        }\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                })(String(val), value);\r\n                case '==': return val == value;\r\n                case '===': return val === value;\r\n                case '!=': return val != value;\r\n                case '!==': return val !== value;\r\n                case '<': return val < value;\r\n                case '<=': return val <= value;\r\n                case '>': return val > value;\r\n                case '>=': return val >= value;\r\n            }\r\n\r\n            return true;\r\n        }, this);\r\n    },\r\n\r\n    // values(prop:String):Array\r\n    values: function(array, prop) {\r\n        return array.map(function(item) {\r\n            return dmx.parse(prop, new dmx.DataScope(item, this));\r\n        });\r\n    },\r\n\r\n    // groupBy(prop:String):Object\r\n    groupBy: function(array, prop) {\r\n        return array.reduce(function(obj, item) {\r\n            var key = dmx.parse(prop, new dmx.DataScope(item, this));\r\n            if (!obj[key]) obj[key] = [];\r\n            obj[key].push(item);\r\n            return obj;\r\n        }, {});\r\n    },\r\n\r\n    // unique([prop:String]):Array\r\n    unique: function(array, prop) {\r\n        if (prop) {\r\n            array = array.map(function(item) {\r\n                return dmx.parse(prop, new dmx.DataScope(item, this));\r\n            });\r\n        }\r\n\r\n        return Object.keys(array.reduce(function(obj, value) {\r\n            obj[JSON.stringify(value)] = 1;\r\n            return obj;\r\n        }, {})).map(function(key) {\r\n            return JSON.parse(key);\r\n        });\r\n    },\r\n\r\n    // sortOn([prop:String]):Array\r\n    sort: function(array, prop) {\r\n        return array.slice(0).sort(function(a, b) {\r\n            if (prop) {\r\n                a = dmx.parse(prop, new dmx.DataScope(a, this));\r\n                b = dmx.parse(prop, new dmx.DataScope(b, this));\r\n            }\r\n            return a < b ? -1 : a > b ? 1 : 0;\r\n        });\r\n    },\r\n\r\n    // min([prop:String]):Number\r\n    min: function(array, prop) {\r\n        return array.reduce(function(min, value) {\r\n            if (prop) {\r\n                value = dmx.parse(prop, new dmx.DataScope(value, this));\r\n            }\r\n            value = Number(value);\r\n            return value < min ? value : min;\r\n        }, Infinity);\r\n    },\r\n\r\n    // max([prop:String]):Number\r\n    max: function(array, prop) {\r\n        return array.reduce(function(max, value) {\r\n            if (prop) {\r\n                value = dmx.parse(prop, new dmx.DataScope(value, this));\r\n            }\r\n            value = Number(value);\r\n            return value > max ? value : max;\r\n        }, -Infinity);\r\n    },\r\n\r\n    // sum([prop:String]):Number\r\n    sum: function(array, prop) {\r\n        return array.reduce(function(sum, value) {\r\n            if (prop) {\r\n                value = dmx.parse(prop, new dmx.DataScope(value, this));\r\n            }\r\n            value = Number(value);\r\n            return sum + value;\r\n        }, 0);\r\n    },\r\n\r\n    // avg([prop:String]):Number\r\n    avg: function(array, prop) {\r\n        return array.reduce(function(sum, value) {\r\n            if (prop) {\r\n                value = dmx.parse(prop, new dmx.DataScope(value, this));\r\n            }\r\n            value = Number(value);\r\n            return sum + value;\r\n        }, 0) / array.length;\r\n    },\r\n\r\n    // default():Array\r\n    default: function(array) {\r\n        return array;\r\n    }\r\n\r\n});\r\n","dmx.Formatters('number', {\r\n\r\n    // inRange(min:Number, max:Number):Boolean\r\n    inRange: function(number, min, max) {\r\n        return number >= min && number <= max;\r\n    },\r\n\r\n    // abs():Number\r\n    abs: function(number) {\r\n        return Math.abs(number);\r\n    },\r\n\r\n    // ceil():Number\r\n    ceil: function(number) {\r\n        return Math.ceil(number);\r\n    },\r\n\r\n    // floor():Number\r\n    floor: function(number) {\r\n        return Math.floor(number);\r\n    },\r\n\r\n    // max(max:Number):Number\r\n    max: function(number, max) {\r\n        return Math.max(number, max);\r\n    },\r\n\r\n    // min(min:Number):Number\r\n    min: function(number, min) {\r\n        return Math.min(number, min);\r\n    },\r\n\r\n    // pow(exponent:Number):Number\r\n    pow: function(number, exponent) {\r\n        return Math.pow(number, exponent);\r\n    },\r\n\r\n    // per(amount:Number):Number\r\n    per: function(number, amount) {\r\n        return number * amount / 100;\r\n    },\r\n\r\n    // perOf(total:Number):Number\r\n    perOf: function(number, total) {\r\n        return number / total;\r\n    },\r\n\r\n    // round([precision:Number]):Number\r\n    round: function(number, precision) {\r\n        var factor = Math.pow(10, precision || 0);\r\n        var temp = number * factor;\r\n        var rounded = Math.round(temp);\r\n        return rounded / factor;\r\n    },\r\n\r\n    // pad(length:Number):String\r\n    pad: function(number, length) {\r\n        var neg = number < 0 ? '-' : '';\r\n        var str = String(Math.abs(number));\r\n        while (str.length < length) {\r\n            str = '0' + str;\r\n        }\r\n        return neg + str;\r\n    },\r\n\r\n    // toFixed([decimals:Number]):String\r\n    toFixed: function(number, decimals) {\r\n        return number.toFixed(decimals);\r\n    },\r\n\r\n    // formatNumber([decimals:Number], [separator:String], [delimiter:String]):String\r\n    formatNumber: function(number, decimals, separator, delimiter) {\r\n        if (isNaN(number)) return 'Invalid Number';\r\n        if (!isFinite(number)) return (number < 0 ? '-' : '') + 'infinite';\r\n\r\n        separator = separator || '.';\r\n        delimiter = delimiter || '';\r\n\r\n        var neg = number < 0;\r\n        number = Math.abs(number);\r\n        var x = (decimals != null && decimals >= 0 ? number.toFixed(decimals) : number.toString()).split('.');\r\n        var x1 = x[0];\r\n        var x2 = x.length > 1 ? separator + x[1] : '';\r\n\r\n        if (delimiter) {\r\n            var re = /(\\d+)(\\d{3})/;\r\n            while (re.test(x1)) {\r\n                x1 = x1.replace(re, '$1' + delimiter + '$2');\r\n            }\r\n        }\r\n\r\n        return (neg ? '-' : '') + x1 + x2;\r\n    },\r\n\r\n    // formatPercentage([decimals:Number]):String\r\n    formatPercentage: function(number, decimals) {\r\n        var pow = Math.pow(10, decimals);\r\n        return (Math.round(number * pow * 100) / pow) + '%';\r\n    },\r\n\r\n    // formatCurrency([unit:String], [separator:String], [delimiter:String], [precision:Number]):String\r\n    formatCurrency: function(number, unit, separator, delimiter, precision) {\r\n        if (isNaN(number) || !isFinite(number)) return 'Invalid Amount';\r\n\r\n        unit = unit || '$';\r\n        separator = separator || '.';\r\n        delimiter = delimiter || ',';\r\n        precision = precision != null ? precision : 2;\r\n\r\n        var neg = number < 0;\r\n        var x = Math.abs(number).toFixed(precision).split('.');\r\n        var x1 = x[0];\r\n        var x2 = x.length > 1 ? separator + x[1] : '';\r\n\r\n        if (delimiter) {\r\n            var re = /(\\d+)(\\d{3})/;\r\n            while (re.test(x1)) {\r\n                x1 = x1.replace(re, '$1' + delimiter + '$2');\r\n            }\r\n        }\r\n\r\n        return (neg ? '-' : '') + unit + x1 + x2;\r\n    },\r\n\r\n    // formatSize([decimals:Number], [binary:Boolean]):String\r\n    formatSize: function(number, decimals, binary) {\r\n        if (isNaN(number) || !isFinite(number)) return 'Invalid Size';\r\n\r\n        decimals = decimals || 2;\r\n\r\n        var base = binary ? 1024 : 1000;\r\n        var suffix = binary ? ['KiB', 'MiB', 'GiB', 'TiB'] : ['KB', 'MB', 'GB', 'TB'];\r\n\r\n        for (var i = 3; i >= 0; i--) {\r\n            var n = Math.pow(base, i + 1);\r\n            if (number >= n) {\r\n                number /= n;\r\n                var pow = Math.pow(10, decimals);\r\n                number = Math.round(number * pow) / pow;\r\n                return number + suffix[i];\r\n            }\r\n        }\r\n\r\n        return number + 'B';\r\n    },\r\n\r\n    // default():Number\r\n    default: function(number) {\r\n        return number;\r\n    },\r\n\r\n    // toString():String\r\n    toString: function(number) {\r\n        return String(number);\r\n    },\r\n\r\n    // toDate():String\r\n    toDate: function(number) {\r\n        return (new Date(number * 1000)).toISOString();\r\n    }\r\n\r\n    // TODO: use localization, Intl from browser? (polyfill => https://github.com/andyearnshaw/Intl.js/)\r\n    // format, toString, currency, toLocale, bytes\r\n\r\n});\r\n","(function() {\r\n\r\ndmx.Formatters('string', {\r\n\r\n    // startWith(search:String):Boolean\r\n    startsWith: function(string, search) {\r\n        return string.indexOf(search) === 0;\r\n    },\r\n\r\n    // endsWith(search:String):Boolean\r\n    endsWith: function(string, search) {\r\n        var pos = string.length - search.length;\r\n        var index = string.lastIndexOf(search);\r\n        return index !== -1 && index === pos;\r\n    },\r\n\r\n    // contains(search:String):Boolean\r\n    contains: function(string, search) {\r\n        return string.indexOf(search) !== -1;\r\n    },\r\n\r\n    // notContains(search:String):Boolean\r\n    notContains: function(string, search) {\r\n        return string.indexOf(search) === -1;\r\n    },\r\n\r\n    search: function(string, search, matchAll) {\r\n        return String(search).split(/\\s+/)[matchAll ? 'every' : 'some'](function(word) {\r\n            return string.indexOf(word) !== -1;\r\n        });\r\n    },\r\n\r\n    // fuzzySearch(search:String):Boolean\r\n    fuzzySearch: function(string, search) {\r\n        var stringLen = string.length;\r\n        var searchLen = search.length;\r\n        if (searchLen > stringLen) {\r\n            return false;\r\n        }\r\n        if (searchLen === stringLen) {\r\n            return string === search;\r\n        }\r\n        outer: for (var i = 0, j = 0; i < searchLen; i++) {\r\n            var char = search.charCodeAt(i);\r\n            while (j < stringLen) {\r\n                if (string.charCodeAt(j++) === char) {\r\n                    continue outer;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    },\r\n\r\n    // test(regexp:RegExp):Boolean\r\n    test: function(string, regexp) {\r\n        return regexp.test(string);\r\n    },\r\n\r\n    // lowercase():String\r\n    lowercase: function(string) {\r\n        return string.toLowerCase();\r\n    },\r\n\r\n    // uppercase():String\r\n    uppercase: function(string) {\r\n        return string.toUpperCase();\r\n    },\r\n\r\n    // slugify():String\r\n    slugify: function(string) {\r\n        var map = {\"2d\":\"-\",\"20\":\"-\",\"24\":\"s\",\"26\":\"and\",\"30\":\"0\",\"31\":\"1\",\"32\":\"2\",\"33\":\"3\",\"34\":\"4\",\"35\":\"5\",\"36\":\"6\",\"37\":\"7\",\"38\":\"8\",\"39\":\"9\",\"41\":\"A\",\"42\":\"B\",\"43\":\"C\",\"44\":\"D\",\"45\":\"E\",\"46\":\"F\",\"47\":\"G\",\"48\":\"H\",\"49\":\"I\",\"50\":\"P\",\"51\":\"Q\",\"52\":\"R\",\"53\":\"S\",\"54\":\"T\",\"55\":\"U\",\"56\":\"V\",\"57\":\"W\",\"58\":\"X\",\"59\":\"Y\",\"61\":\"a\",\"62\":\"b\",\"63\":\"c\",\"64\":\"d\",\"65\":\"e\",\"66\":\"f\",\"67\":\"g\",\"68\":\"h\",\"69\":\"i\",\"70\":\"p\",\"71\":\"q\",\"72\":\"r\",\"73\":\"s\",\"74\":\"t\",\"75\":\"u\",\"76\":\"v\",\"77\":\"w\",\"78\":\"x\",\"79\":\"y\",\"100\":\"A\",\"101\":\"a\",\"102\":\"A\",\"103\":\"a\",\"104\":\"A\",\"105\":\"a\",\"106\":\"C\",\"107\":\"c\",\"108\":\"C\",\"109\":\"c\",\"110\":\"D\",\"111\":\"d\",\"112\":\"E\",\"113\":\"e\",\"114\":\"E\",\"115\":\"e\",\"116\":\"E\",\"117\":\"e\",\"118\":\"E\",\"119\":\"e\",\"120\":\"G\",\"121\":\"g\",\"122\":\"G\",\"123\":\"g\",\"124\":\"H\",\"125\":\"h\",\"126\":\"H\",\"127\":\"h\",\"128\":\"I\",\"129\":\"i\",\"130\":\"I\",\"131\":\"i\",\"132\":\"IJ\",\"133\":\"ij\",\"134\":\"J\",\"135\":\"j\",\"136\":\"K\",\"137\":\"k\",\"138\":\"k\",\"139\":\"L\",\"140\":\"l\",\"141\":\"L\",\"142\":\"l\",\"143\":\"N\",\"144\":\"n\",\"145\":\"N\",\"146\":\"n\",\"147\":\"N\",\"148\":\"n\",\"149\":\"n\",\"150\":\"O\",\"151\":\"o\",\"152\":\"OE\",\"153\":\"oe\",\"154\":\"R\",\"155\":\"r\",\"156\":\"R\",\"157\":\"r\",\"158\":\"R\",\"159\":\"r\",\"160\":\"S\",\"161\":\"s\",\"162\":\"T\",\"163\":\"t\",\"164\":\"T\",\"165\":\"t\",\"166\":\"T\",\"167\":\"t\",\"168\":\"U\",\"169\":\"u\",\"170\":\"U\",\"171\":\"u\",\"172\":\"U\",\"173\":\"u\",\"174\":\"W\",\"175\":\"w\",\"176\":\"Y\",\"177\":\"y\",\"178\":\"Y\",\"179\":\"Z\",\"180\":\"b\",\"181\":\"B\",\"182\":\"b\",\"183\":\"b\",\"184\":\"b\",\"185\":\"b\",\"186\":\"C\",\"187\":\"C\",\"188\":\"c\",\"189\":\"D\",\"190\":\"E\",\"191\":\"F\",\"192\":\"f\",\"193\":\"G\",\"194\":\"Y\",\"195\":\"h\",\"196\":\"i\",\"197\":\"I\",\"198\":\"K\",\"199\":\"k\",\"200\":\"A\",\"201\":\"a\",\"202\":\"A\",\"203\":\"a\",\"204\":\"E\",\"205\":\"e\",\"206\":\"E\",\"207\":\"e\",\"208\":\"I\",\"209\":\"i\",\"210\":\"R\",\"211\":\"r\",\"212\":\"R\",\"213\":\"r\",\"214\":\"U\",\"215\":\"u\",\"216\":\"U\",\"217\":\"u\",\"218\":\"S\",\"219\":\"s\",\"220\":\"n\",\"221\":\"d\",\"222\":\"8\",\"223\":\"8\",\"224\":\"Z\",\"225\":\"z\",\"226\":\"A\",\"227\":\"a\",\"228\":\"E\",\"229\":\"e\",\"230\":\"O\",\"231\":\"o\",\"232\":\"Y\",\"233\":\"y\",\"234\":\"l\",\"235\":\"n\",\"236\":\"t\",\"237\":\"j\",\"238\":\"db\",\"239\":\"qp\",\"240\":\"<\",\"241\":\"?\",\"242\":\"?\",\"243\":\"B\",\"244\":\"U\",\"245\":\"A\",\"246\":\"E\",\"247\":\"e\",\"248\":\"J\",\"249\":\"j\",\"250\":\"a\",\"251\":\"a\",\"252\":\"a\",\"253\":\"b\",\"254\":\"c\",\"255\":\"e\",\"256\":\"d\",\"257\":\"d\",\"258\":\"e\",\"259\":\"e\",\"260\":\"g\",\"261\":\"g\",\"262\":\"g\",\"263\":\"Y\",\"264\":\"x\",\"265\":\"u\",\"266\":\"h\",\"267\":\"h\",\"268\":\"i\",\"269\":\"i\",\"270\":\"w\",\"271\":\"m\",\"272\":\"n\",\"273\":\"n\",\"274\":\"N\",\"275\":\"o\",\"276\":\"oe\",\"277\":\"m\",\"278\":\"o\",\"279\":\"r\",\"280\":\"R\",\"281\":\"R\",\"282\":\"S\",\"283\":\"f\",\"284\":\"f\",\"285\":\"f\",\"286\":\"f\",\"287\":\"t\",\"288\":\"t\",\"289\":\"u\",\"290\":\"Z\",\"291\":\"Z\",\"292\":\"3\",\"293\":\"3\",\"294\":\"?\",\"295\":\"?\",\"296\":\"5\",\"297\":\"C\",\"298\":\"O\",\"299\":\"B\",\"363\":\"a\",\"364\":\"e\",\"365\":\"i\",\"366\":\"o\",\"367\":\"u\",\"368\":\"c\",\"369\":\"d\",\"386\":\"A\",\"388\":\"E\",\"389\":\"H\",\"390\":\"i\",\"391\":\"A\",\"392\":\"B\",\"393\":\"r\",\"394\":\"A\",\"395\":\"E\",\"396\":\"Z\",\"397\":\"H\",\"398\":\"O\",\"399\":\"I\",\"400\":\"E\",\"401\":\"E\",\"402\":\"T\",\"403\":\"r\",\"404\":\"E\",\"405\":\"S\",\"406\":\"I\",\"407\":\"I\",\"408\":\"J\",\"409\":\"jb\",\"410\":\"A\",\"411\":\"B\",\"412\":\"V\",\"413\":\"G\",\"414\":\"D\",\"415\":\"E\",\"416\":\"ZH\",\"417\":\"Z\",\"418\":\"I\",\"419\":\"Y\",\"420\":\"R\",\"421\":\"S\",\"422\":\"T\",\"423\":\"U\",\"424\":\"F\",\"425\":\"H\",\"426\":\"TS\",\"427\":\"CH\",\"428\":\"SH\",\"429\":\"SCH\",\"430\":\"a\",\"431\":\"b\",\"432\":\"v\",\"433\":\"g\",\"434\":\"d\",\"435\":\"e\",\"436\":\"zh\",\"437\":\"z\",\"438\":\"i\",\"439\":\"y\",\"440\":\"r\",\"441\":\"s\",\"442\":\"t\",\"443\":\"u\",\"444\":\"f\",\"445\":\"h\",\"446\":\"ts\",\"447\":\"ch\",\"448\":\"sh\",\"449\":\"sch\",\"450\":\"e\",\"451\":\"e\",\"452\":\"h\",\"453\":\"r\",\"454\":\"e\",\"455\":\"s\",\"456\":\"i\",\"457\":\"i\",\"458\":\"j\",\"459\":\"jb\",\"460\":\"W\",\"461\":\"w\",\"462\":\"Tb\",\"463\":\"tb\",\"464\":\"IC\",\"465\":\"ic\",\"466\":\"A\",\"467\":\"a\",\"468\":\"IA\",\"469\":\"ia\",\"470\":\"Y\",\"471\":\"y\",\"472\":\"O\",\"473\":\"o\",\"474\":\"V\",\"475\":\"v\",\"476\":\"V\",\"477\":\"v\",\"478\":\"Oy\",\"479\":\"oy\",\"480\":\"C\",\"481\":\"c\",\"490\":\"R\",\"491\":\"r\",\"492\":\"F\",\"493\":\"f\",\"494\":\"H\",\"495\":\"h\",\"496\":\"X\",\"497\":\"x\",\"498\":\"3\",\"499\":\"3\",\"500\":\"d\",\"501\":\"d\",\"502\":\"d\",\"503\":\"d\",\"504\":\"R\",\"505\":\"R\",\"506\":\"R\",\"507\":\"R\",\"508\":\"JT\",\"509\":\"JT\",\"510\":\"E\",\"511\":\"e\",\"512\":\"JT\",\"513\":\"jt\",\"514\":\"JX\",\"515\":\"JX\",\"531\":\"U\",\"532\":\"D\",\"533\":\"Q\",\"534\":\"N\",\"535\":\"T\",\"536\":\"2\",\"537\":\"F\",\"538\":\"r\",\"539\":\"p\",\"540\":\"z\",\"541\":\"2\",\"542\":\"n\",\"543\":\"x\",\"544\":\"U\",\"545\":\"B\",\"546\":\"j\",\"547\":\"t\",\"548\":\"n\",\"549\":\"C\",\"550\":\"R\",\"551\":\"8\",\"552\":\"R\",\"553\":\"O\",\"554\":\"P\",\"555\":\"O\",\"556\":\"S\",\"561\":\"w\",\"562\":\"f\",\"563\":\"q\",\"564\":\"n\",\"565\":\"t\",\"566\":\"q\",\"567\":\"t\",\"568\":\"n\",\"569\":\"p\",\"570\":\"h\",\"571\":\"a\",\"572\":\"n\",\"573\":\"a\",\"574\":\"u\",\"575\":\"j\",\"576\":\"u\",\"577\":\"2\",\"578\":\"n\",\"579\":\"2\",\"580\":\"n\",\"581\":\"g\",\"582\":\"l\",\"583\":\"uh\",\"584\":\"p\",\"585\":\"o\",\"586\":\"S\",\"587\":\"u\",\"4a\":\"J\",\"4b\":\"K\",\"4c\":\"L\",\"4d\":\"M\",\"4e\":\"N\",\"4f\":\"O\",\"5a\":\"Z\",\"6a\":\"j\",\"6b\":\"k\",\"6c\":\"l\",\"6d\":\"m\",\"6e\":\"n\",\"6f\":\"o\",\"7a\":\"z\",\"a2\":\"c\",\"a3\":\"f\",\"a5\":\"Y\",\"a7\":\"s\",\"a9\":\"c\",\"aa\":\"a\",\"ae\":\"r\",\"b2\":\"2\",\"b3\":\"3\",\"b5\":\"u\",\"b6\":\"p\",\"b9\":\"1\",\"c0\":\"A\",\"c1\":\"A\",\"c2\":\"A\",\"c3\":\"A\",\"c4\":\"A\",\"c5\":\"A\",\"c6\":\"AE\",\"c7\":\"C\",\"c8\":\"E\",\"c9\":\"E\",\"ca\":\"E\",\"cb\":\"E\",\"cc\":\"I\",\"cd\":\"I\",\"ce\":\"I\",\"cf\":\"I\",\"d0\":\"D\",\"d1\":\"N\",\"d2\":\"O\",\"d3\":\"O\",\"d4\":\"O\",\"d5\":\"O\",\"d6\":\"O\",\"d7\":\"X\",\"d8\":\"O\",\"d9\":\"U\",\"da\":\"U\",\"db\":\"U\",\"dc\":\"U\",\"dd\":\"Y\",\"de\":\"p\",\"df\":\"b\",\"e0\":\"a\",\"e1\":\"a\",\"e2\":\"a\",\"e3\":\"a\",\"e4\":\"a\",\"e5\":\"a\",\"e6\":\"ae\",\"e7\":\"c\",\"e8\":\"e\",\"e9\":\"e\",\"ea\":\"e\",\"eb\":\"e\",\"ec\":\"i\",\"ed\":\"i\",\"ee\":\"i\",\"ef\":\"i\",\"f0\":\"o\",\"f1\":\"n\",\"f2\":\"o\",\"f3\":\"o\",\"f4\":\"o\",\"f5\":\"o\",\"f6\":\"o\",\"f8\":\"o\",\"f9\":\"u\",\"fa\":\"u\",\"fb\":\"u\",\"fc\":\"u\",\"fd\":\"y\",\"ff\":\"y\",\"10a\":\"C\",\"10b\":\"c\",\"10c\":\"C\",\"10d\":\"c\",\"10e\":\"D\",\"10f\":\"d\",\"11a\":\"E\",\"11b\":\"e\",\"11c\":\"G\",\"11d\":\"g\",\"11e\":\"G\",\"11f\":\"g\",\"12a\":\"I\",\"12b\":\"i\",\"12c\":\"I\",\"12d\":\"i\",\"12e\":\"I\",\"12f\":\"i\",\"13a\":\"l\",\"13b\":\"L\",\"13c\":\"l\",\"13d\":\"L\",\"13e\":\"l\",\"13f\":\"L\",\"14a\":\"n\",\"14b\":\"n\",\"14c\":\"O\",\"14d\":\"o\",\"14e\":\"O\",\"14f\":\"o\",\"15a\":\"S\",\"15b\":\"s\",\"15c\":\"S\",\"15d\":\"s\",\"15e\":\"S\",\"15f\":\"s\",\"16a\":\"U\",\"16b\":\"u\",\"16c\":\"U\",\"16d\":\"u\",\"16e\":\"U\",\"16f\":\"u\",\"17a\":\"z\",\"17b\":\"Z\",\"17c\":\"z\",\"17d\":\"Z\",\"17e\":\"z\",\"17f\":\"f\",\"18a\":\"D\",\"18b\":\"d\",\"18c\":\"d\",\"18d\":\"q\",\"18e\":\"E\",\"18f\":\"e\",\"19a\":\"l\",\"19b\":\"h\",\"19c\":\"w\",\"19d\":\"N\",\"19e\":\"n\",\"19f\":\"O\",\"1a0\":\"O\",\"1a1\":\"o\",\"1a2\":\"P\",\"1a3\":\"P\",\"1a4\":\"P\",\"1a5\":\"p\",\"1a6\":\"R\",\"1a7\":\"S\",\"1a8\":\"s\",\"1a9\":\"E\",\"1aa\":\"l\",\"1ab\":\"t\",\"1ac\":\"T\",\"1ad\":\"t\",\"1ae\":\"T\",\"1af\":\"U\",\"1b0\":\"u\",\"1b1\":\"U\",\"1b2\":\"U\",\"1b3\":\"Y\",\"1b4\":\"y\",\"1b5\":\"Z\",\"1b6\":\"z\",\"1b7\":\"3\",\"1b8\":\"3\",\"1b9\":\"3\",\"1ba\":\"3\",\"1bb\":\"2\",\"1bc\":\"5\",\"1bd\":\"5\",\"1be\":\"5\",\"1bf\":\"p\",\"1c4\":\"DZ\",\"1c5\":\"Dz\",\"1c6\":\"dz\",\"1c7\":\"Lj\",\"1c8\":\"Lj\",\"1c9\":\"lj\",\"1ca\":\"NJ\",\"1cb\":\"Nj\",\"1cc\":\"nj\",\"1cd\":\"A\",\"1ce\":\"a\",\"1cf\":\"I\",\"1d0\":\"i\",\"1d1\":\"O\",\"1d2\":\"o\",\"1d3\":\"U\",\"1d4\":\"u\",\"1d5\":\"U\",\"1d6\":\"u\",\"1d7\":\"U\",\"1d8\":\"u\",\"1d9\":\"U\",\"1da\":\"u\",\"1db\":\"U\",\"1dc\":\"u\",\"1dd\":\"e\",\"1de\":\"A\",\"1df\":\"a\",\"1e0\":\"A\",\"1e1\":\"a\",\"1e2\":\"AE\",\"1e3\":\"ae\",\"1e4\":\"G\",\"1e5\":\"g\",\"1e6\":\"G\",\"1e7\":\"g\",\"1e8\":\"K\",\"1e9\":\"k\",\"1ea\":\"Q\",\"1eb\":\"q\",\"1ec\":\"Q\",\"1ed\":\"q\",\"1ee\":\"3\",\"1ef\":\"3\",\"1f0\":\"J\",\"1f1\":\"dz\",\"1f2\":\"dZ\",\"1f3\":\"DZ\",\"1f4\":\"g\",\"1f5\":\"G\",\"1f6\":\"h\",\"1f7\":\"p\",\"1f8\":\"N\",\"1f9\":\"n\",\"1fa\":\"A\",\"1fb\":\"a\",\"1fc\":\"AE\",\"1fd\":\"ae\",\"1fe\":\"O\",\"1ff\":\"o\",\"20a\":\"I\",\"20b\":\"i\",\"20c\":\"O\",\"20d\":\"o\",\"20e\":\"O\",\"20f\":\"o\",\"21a\":\"T\",\"21b\":\"t\",\"21c\":\"3\",\"21d\":\"3\",\"21e\":\"H\",\"21f\":\"h\",\"22a\":\"O\",\"22b\":\"o\",\"22c\":\"O\",\"22d\":\"o\",\"22e\":\"O\",\"22f\":\"o\",\"23a\":\"A\",\"23b\":\"C\",\"23c\":\"c\",\"23d\":\"L\",\"23e\":\"T\",\"23f\":\"s\",\"24a\":\"Q\",\"24b\":\"q\",\"24c\":\"R\",\"24d\":\"r\",\"24e\":\"Y\",\"24f\":\"y\",\"25a\":\"e\",\"25b\":\"3\",\"25c\":\"3\",\"25d\":\"3\",\"25e\":\"3\",\"25f\":\"j\",\"26a\":\"i\",\"26b\":\"I\",\"26c\":\"I\",\"26d\":\"I\",\"26e\":\"h\",\"26f\":\"w\",\"27a\":\"R\",\"27b\":\"r\",\"27c\":\"R\",\"27d\":\"R\",\"27e\":\"r\",\"27f\":\"r\",\"28a\":\"u\",\"28b\":\"v\",\"28c\":\"A\",\"28d\":\"M\",\"28e\":\"Y\",\"28f\":\"Y\",\"29a\":\"B\",\"29b\":\"G\",\"29c\":\"H\",\"29d\":\"j\",\"29e\":\"K\",\"29f\":\"L\",\"2a0\":\"q\",\"2a1\":\"?\",\"2a2\":\"c\",\"2a3\":\"dz\",\"2a4\":\"d3\",\"2a5\":\"dz\",\"2a6\":\"ts\",\"2a7\":\"tf\",\"2a8\":\"tc\",\"2a9\":\"fn\",\"2aa\":\"ls\",\"2ab\":\"lz\",\"2ac\":\"ww\",\"2ae\":\"u\",\"2af\":\"u\",\"2b0\":\"h\",\"2b1\":\"h\",\"2b2\":\"j\",\"2b3\":\"r\",\"2b4\":\"r\",\"2b5\":\"r\",\"2b6\":\"R\",\"2b7\":\"W\",\"2b8\":\"Y\",\"2df\":\"x\",\"2e0\":\"Y\",\"2e1\":\"1\",\"2e2\":\"s\",\"2e3\":\"x\",\"2e4\":\"c\",\"36a\":\"h\",\"36b\":\"m\",\"36c\":\"r\",\"36d\":\"t\",\"36e\":\"v\",\"36f\":\"x\",\"37b\":\"c\",\"37c\":\"c\",\"37d\":\"c\",\"38a\":\"I\",\"38c\":\"O\",\"38e\":\"Y\",\"38f\":\"O\",\"39a\":\"K\",\"39b\":\"A\",\"39c\":\"M\",\"39d\":\"N\",\"39e\":\"E\",\"39f\":\"O\",\"3a0\":\"TT\",\"3a1\":\"P\",\"3a3\":\"E\",\"3a4\":\"T\",\"3a5\":\"Y\",\"3a6\":\"O\",\"3a7\":\"X\",\"3a8\":\"Y\",\"3a9\":\"O\",\"3aa\":\"I\",\"3ab\":\"Y\",\"3ac\":\"a\",\"3ad\":\"e\",\"3ae\":\"n\",\"3af\":\"i\",\"3b0\":\"v\",\"3b1\":\"a\",\"3b2\":\"b\",\"3b3\":\"y\",\"3b4\":\"d\",\"3b5\":\"e\",\"3b6\":\"c\",\"3b7\":\"n\",\"3b8\":\"0\",\"3b9\":\"1\",\"3ba\":\"k\",\"3bb\":\"j\",\"3bc\":\"u\",\"3bd\":\"v\",\"3be\":\"c\",\"3bf\":\"o\",\"3c0\":\"tt\",\"3c1\":\"p\",\"3c2\":\"s\",\"3c3\":\"o\",\"3c4\":\"t\",\"3c5\":\"u\",\"3c6\":\"q\",\"3c7\":\"X\",\"3c8\":\"Y\",\"3c9\":\"w\",\"3ca\":\"i\",\"3cb\":\"u\",\"3cc\":\"o\",\"3cd\":\"u\",\"3ce\":\"w\",\"3d0\":\"b\",\"3d1\":\"e\",\"3d2\":\"Y\",\"3d3\":\"Y\",\"3d4\":\"Y\",\"3d5\":\"O\",\"3d6\":\"w\",\"3d7\":\"x\",\"3d8\":\"Q\",\"3d9\":\"q\",\"3da\":\"C\",\"3db\":\"c\",\"3dc\":\"F\",\"3dd\":\"f\",\"3de\":\"N\",\"3df\":\"N\",\"3e2\":\"W\",\"3e3\":\"w\",\"3e4\":\"q\",\"3e5\":\"q\",\"3e6\":\"h\",\"3e7\":\"e\",\"3e8\":\"S\",\"3e9\":\"s\",\"3ea\":\"X\",\"3eb\":\"x\",\"3ec\":\"6\",\"3ed\":\"6\",\"3ee\":\"t\",\"3ef\":\"t\",\"3f0\":\"x\",\"3f1\":\"e\",\"3f2\":\"c\",\"3f3\":\"j\",\"3f4\":\"O\",\"3f5\":\"E\",\"3f6\":\"E\",\"3f7\":\"p\",\"3f8\":\"p\",\"3f9\":\"C\",\"3fa\":\"M\",\"3fb\":\"M\",\"3fc\":\"p\",\"3fd\":\"C\",\"3fe\":\"C\",\"3ff\":\"C\",\"40a\":\"Hb\",\"40b\":\"Th\",\"40c\":\"K\",\"40d\":\"N\",\"40e\":\"Y\",\"40f\":\"U\",\"41a\":\"K\",\"41b\":\"L\",\"41c\":\"M\",\"41d\":\"N\",\"41e\":\"O\",\"41f\":\"P\",\"42a\":\"\",\"42b\":\"Y\",\"42c\":\"\",\"42d\":\"E\",\"42e\":\"U\",\"42f\":\"YA\",\"43a\":\"k\",\"43b\":\"l\",\"43c\":\"m\",\"43d\":\"n\",\"43e\":\"o\",\"43f\":\"p\",\"44a\":\"\",\"44b\":\"y\",\"44c\":\"\",\"44d\":\"e\",\"44e\":\"u\",\"44f\":\"ya\",\"45a\":\"Hb\",\"45b\":\"h\",\"45c\":\"k\",\"45d\":\"n\",\"45e\":\"y\",\"45f\":\"u\",\"46a\":\"mY\",\"46b\":\"my\",\"46c\":\"Im\",\"46d\":\"Im\",\"46e\":\"3\",\"46f\":\"3\",\"47a\":\"O\",\"47b\":\"o\",\"47c\":\"W\",\"47d\":\"w\",\"47e\":\"W\",\"47f\":\"W\",\"48a\":\"H\",\"48b\":\"H\",\"48c\":\"B\",\"48d\":\"b\",\"48e\":\"P\",\"48f\":\"p\",\"49a\":\"K\",\"49b\":\"k\",\"49c\":\"K\",\"49d\":\"k\",\"49e\":\"K\",\"49f\":\"k\",\"4a0\":\"K\",\"4a1\":\"k\",\"4a2\":\"H\",\"4a3\":\"h\",\"4a4\":\"H\",\"4a5\":\"h\",\"4a6\":\"Ih\",\"4a7\":\"ih\",\"4a8\":\"O\",\"4a9\":\"o\",\"4aa\":\"C\",\"4ab\":\"c\",\"4ac\":\"T\",\"4ad\":\"t\",\"4ae\":\"Y\",\"4af\":\"y\",\"4b0\":\"Y\",\"4b1\":\"y\",\"4b2\":\"X\",\"4b3\":\"x\",\"4b4\":\"TI\",\"4b5\":\"ti\",\"4b6\":\"H\",\"4b7\":\"h\",\"4b8\":\"H\",\"4b9\":\"h\",\"4ba\":\"H\",\"4bb\":\"h\",\"4bc\":\"E\",\"4bd\":\"e\",\"4be\":\"E\",\"4bf\":\"e\",\"4c0\":\"I\",\"4c1\":\"X\",\"4c2\":\"x\",\"4c3\":\"K\",\"4c4\":\"k\",\"4c5\":\"jt\",\"4c6\":\"jt\",\"4c7\":\"H\",\"4c8\":\"h\",\"4c9\":\"H\",\"4ca\":\"h\",\"4cb\":\"H\",\"4cc\":\"h\",\"4cd\":\"M\",\"4ce\":\"m\",\"4cf\":\"l\",\"4d0\":\"A\",\"4d1\":\"a\",\"4d2\":\"A\",\"4d3\":\"a\",\"4d4\":\"AE\",\"4d5\":\"ae\",\"4d6\":\"E\",\"4d7\":\"e\",\"4d8\":\"e\",\"4d9\":\"e\",\"4da\":\"E\",\"4db\":\"e\",\"4dc\":\"X\",\"4dd\":\"X\",\"4de\":\"3\",\"4df\":\"3\",\"4e0\":\"3\",\"4e1\":\"3\",\"4e2\":\"N\",\"4e3\":\"n\",\"4e4\":\"N\",\"4e5\":\"n\",\"4e6\":\"O\",\"4e7\":\"o\",\"4e8\":\"O\",\"4e9\":\"o\",\"4ea\":\"O\",\"4eb\":\"o\",\"4ec\":\"E\",\"4ed\":\"e\",\"4ee\":\"Y\",\"4ef\":\"y\",\"4f0\":\"Y\",\"4f1\":\"y\",\"4f2\":\"Y\",\"4f3\":\"y\",\"4f4\":\"H\",\"4f5\":\"h\",\"4f6\":\"R\",\"4f7\":\"r\",\"4f8\":\"bI\",\"4f9\":\"bi\",\"4fa\":\"F\",\"4fb\":\"f\",\"4fc\":\"X\",\"4fd\":\"x\",\"4fe\":\"X\",\"4ff\":\"x\",\"50a\":\"H\",\"50b\":\"h\",\"50c\":\"G\",\"50d\":\"g\",\"50e\":\"T\",\"50f\":\"t\",\"51a\":\"Q\",\"51b\":\"q\",\"51c\":\"W\",\"51d\":\"w\",\"53a\":\"d\",\"53b\":\"r\",\"53c\":\"L\",\"53d\":\"Iu\",\"53e\":\"O\",\"53f\":\"y\",\"54a\":\"m\",\"54b\":\"o\",\"54c\":\"N\",\"54d\":\"U\",\"54e\":\"Y\",\"54f\":\"S\",\"56a\":\"d\",\"56b\":\"h\",\"56c\":\"l\",\"56d\":\"lu\",\"56e\":\"d\",\"56f\":\"y\",\"57a\":\"w\",\"57b\":\"2\",\"57c\":\"n\",\"57d\":\"u\",\"57e\":\"y\",\"57f\":\"un\"};\r\n\r\n        var str = '';\r\n        for (var i = 0; i < string.length; i++) {\r\n          str += map[string.charCodeAt(i).toString(16)] || '';\r\n        }\r\n\r\n        return str.toLowerCase().replace(/-+/g, '-').replace(/^-|-$/, '');\r\n    },\r\n\r\n    // camelize():String\r\n    camelize: function(string) {\r\n        return string.trim().replace(/(\\-|_|\\s)+(.)?/g, function(a, b, c) {\r\n            return (c ? c.toUpperCase() : '');\r\n        });\r\n    },\r\n\r\n    // capitalize():String\r\n    capitalize: function(string) {\r\n        return string.substr(0, 1).toUpperCase() + string.substr(1).toLowerCase();\r\n    },\r\n\r\n    // dasherize():String\r\n    dasherize: function(string) {\r\n        return string.replace(/[_\\s]+/g, '-').replace(/([A-Z])/g, '-$1').replace(/-+/g, '-').toLowerCase();\r\n    },\r\n\r\n    // humanize():String\r\n    humanize: function(string) {\r\n        var str = string.replace(/([a-z\\d])([A-Z+])/g, '$1_$2').replace(/[-\\s]+/g, '_').replace(/_+/g, ' ').trim();\r\n        return str.substr(0, 1).toUpperCase() + str.substr(1).toLowerCase();\r\n    },\r\n\r\n    // underscore():String\r\n    underscore: function(string) {\r\n        return string.trim().replace(/([a-z\\d])([A-Z]+)/g, '$1_$1').replace(/[-\\s]+/g, '_').toLowerCase();\r\n    },\r\n\r\n    // titlecase():String\r\n    titlecase: function(string) {\r\n        return string.toLowerCase().replace(/(?:^|\\s)\\S/g, function(a) {\r\n            return a.toUpperCase();\r\n        });\r\n    },\r\n\r\n    // camelcase():String\r\n    camelcase: function(string) {\r\n        return string.toLowerCase().replace(/\\s+(\\S)/g, function(a, b) {\r\n            return b.toUpperCase();\r\n        });\r\n    },\r\n\r\n    // substr(start:Number, [length:Number]):String\r\n    substr: function(string, start, length) {\r\n        return string.substr(start, length);\r\n    },\r\n\r\n    // substring(start:Number, [end:Number]):String\r\n    substring: function(string, start, end) {\r\n        return string.substring(start, end);\r\n    },\r\n\r\n    // replace(search:String|RegExp, replace:String):String\r\n    replace: function(string, search, replace) {\r\n        if (typeof search == 'string') {\r\n            search = new RegExp(dmx.escapeRegExp(search), 'g');\r\n        }\r\n        return string.replace(search, replace);\r\n    },\r\n\r\n    // trim():String\r\n    trim: function(string) {\r\n        return string.trim();\r\n    },\r\n\r\n    // trimLeft():String\r\n    trimLeft: function(string) {\r\n        return string.replace(/^[\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF]*/, '');\r\n    },\r\n\r\n    // trimRight():String\r\n    trimRight: function(string) {\r\n        return string.replace(/[\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF]*$/, '');\r\n    },\r\n\r\n    // concat(string2:String):String\r\n    concat: function(string, string2) {\r\n        return string.concat(string2);\r\n    },\r\n\r\n    // trunc(charsAllowed:Number, [useWordBoundary:Boolean], [append:String]):String\r\n    trunc: function(string, charsAllowed, useWordBoundary, append) {\r\n        useWordBoundary = !!useWordBoundary;\r\n        append = append || '…';\r\n\r\n        if (string.length > charsAllowed) {\r\n            string = string.substr(0, charsAllowed);\r\n\r\n            if (useWordBoundary && string.indexOf(' ') !== -1) {\r\n                string = string.substr(0, string.lastIndexOf(' '));\r\n            }\r\n\r\n            string += append;\r\n        }\r\n\r\n        return string;\r\n    },\r\n\r\n    // stripTags():String\r\n    stripTags: function(string) {\r\n        return string.replace(/<[^>]+>/g, '');\r\n    },\r\n\r\n    // padStart(length:Number, [filler:String]):String\r\n    padStart: function(string, length, filler) {\r\n        filler = filler || ' ';\r\n\r\n        if (length <= string.length) {\r\n            return string;\r\n        }\r\n\r\n        var rem = length - string.length;\r\n        while (filler.length < rem) {\r\n            filler += filler;\r\n        }\r\n\r\n        return filler.substr(0, rem) + string;\r\n    },\r\n\r\n    // padEnd(length:Number, [filler:String]):String\r\n    padEnd: function(string, length, filler) {\r\n        filler = filler || ' ';\r\n\r\n        if (length <= string.length) {\r\n            return string;\r\n        }\r\n\r\n        var rem = length - string.length;\r\n        while (filler.length < rem) {\r\n            filler += filler;\r\n        }\r\n\r\n        return string + filler.substr(0, rem);\r\n    },\r\n\r\n    // repeat(count:Number):String\r\n    repeat: function(string, count) {\r\n        var out = '';\r\n        for (var i = 0; i < count; i++) {\r\n            out += string;\r\n        }\r\n        return out;\r\n    },\r\n\r\n    // wordCount():Number\r\n    wordCount: function(string) {\r\n        return string.trim().split(/\\s+/).length;\r\n    },\r\n\r\n    // split(separator:String|RegExp):Array\r\n    split: function(string, separator) {\r\n        return string.split(separator);\r\n    },\r\n\r\n    // default()\r\n    default: function(string) {\r\n        return string;\r\n    },\r\n\r\n    // toNumber():Number\r\n    toNumber: function(string) {\r\n        return Number(string);\r\n    },\r\n\r\n    // Date formatters (requires a date string)\r\n\r\n    toDate: function(string) {\r\n        var date = parseDate(string);\r\n        if (date.toString() == 'Invalid Date') return null;\r\n        return formatLocalDate(date);\r\n    },\r\n\r\n    toUTCDate: function(string) {\r\n        var date = parseDate(string);\r\n        if (date.toString() == 'Invalid Date') return null;\r\n        return date.toISOString();\r\n    },\r\n\r\n    // getYear():Number\r\n    getYear: function(string) {\r\n        var date = parseDate(string);\r\n        if (date.toString() == 'Invalid Date') return null;\r\n        return date.getFullYear();\r\n    },\r\n\r\n    // getMonth():Number\r\n    getMonth: function(string) {\r\n        var date = parseDate(string);\r\n        if (date.toString() == 'Invalid Date') return null;\r\n        return date.getMonth();\r\n    },\r\n\r\n    // getDate():Number\r\n    getDate: function(string) {\r\n        var date = parseDate(string);\r\n        if (date.toString() == 'Invalid Date') return null;\r\n        return date.getDate();\r\n    },\r\n\r\n    // getDay():Number\r\n    getDay: function(string) {\r\n        var date = parseDate(string);\r\n        if (date.toString() == 'Invalid Date') return null;\r\n        return date.getDay();\r\n    },\r\n\r\n    // addYears(years:Number):String\r\n    addYears: function(string, years) {\r\n        var date = parseDate(string);\r\n        if (date.toString() == 'Invalid Date') return null;\r\n        date.setFullYear(date.getFullYear() + years);\r\n        return formatLocalDate(date);\r\n    },\r\n\r\n    // addMonths(months:Number):String\r\n    addMonths: function(string, months) {\r\n        var date = parseDate(string);\r\n        if (date.toString() == 'Invalid Date') return null;\r\n        date.setMonth(date.getMonth() + months);\r\n        return formatLocalDate(date);\r\n    },\r\n\r\n    // addWeeks(weeks:Number):String\r\n    addWeeks: function(string, weeks) {\r\n        var date = parseDate(string);\r\n        if (date.toString() == 'Invalid Date') return null;\r\n        date.setDate(date.getDate() + (weeks * 7));\r\n        return formatLocalDate(date);\r\n    },\r\n\r\n    // addDays(days:Number):String\r\n    addDays: function(string, days) {\r\n        var date = parseDate(string);\r\n        if (date.toString() == 'Invalid Date') return null;\r\n        date.setDate(date.getDate() + days);\r\n        return formatLocalDate(date);\r\n    },\r\n\r\n    // addHours(hours:Number):String\r\n    addHours: function(string, hours) {\r\n        var date = parseDate(string);\r\n        if (date.toString() == 'Invalid Date') return null;\r\n        date.setHours(date.getHours() + hours);\r\n        return formatLocalDate(date);\r\n    },\r\n\r\n    // addMinutes(minutes:Number):String\r\n    addMinutes: function(string, minutes) {\r\n        var date = parseDate(string);\r\n        if (date.toString() == 'Invalid Date') return null;\r\n        date.setMinutes(date.getMinutes() + minutes);\r\n        return formatLocalDate(date);\r\n    },\r\n\r\n    // addSeconds(seconds:Number):String\r\n    addSeconds: function(string, seconds) {\r\n        var date = parseDate(string);\r\n        if (date.toString() == 'Invalid Date') return null;\r\n        date.setSeconds(date.getSeconds() + seconds);\r\n        return formatLocalDate(date);\r\n    },\r\n\r\n    // yearsUntil(date:String):Number\r\n    yearsUntil: function(string, date) {\r\n        var date1 = parseDate(string);\r\n        var date2 = parseDate(date);\r\n        if (date1.toString() == 'Invalid' || date2.toString() == 'Invalid') return null;\r\n        return date2.getFullYear() - date1.getFullYear();\r\n    },\r\n\r\n    // monthsUntil(date:String):Number\r\n    monthsUntil: function(string, date) {\r\n        var date1 = parseDate(string);\r\n        var date2 = parseDate(date);\r\n        if (date1.toString() == 'Invalid' || date2.toString() == 'Invalid') return null;\r\n        return (date2.getFullYear() * 12 + date2.getMonth()) - (date1.getFullYear() * 12 + date1.getMonth());\r\n    },\r\n\r\n    // weeksUntil(date:String):Number\r\n    weeksUntil: function(string, date) {\r\n        var date1 = parseDate(string);\r\n        var date2 = parseDate(date);\r\n        if (date1.toString() == 'Invalid' || date2.toString() == 'Invalid') return null;\r\n        return Math.floor((date2 - date1) / 604800000); // 7 * 24 * 60 * 60 * 1000\r\n    },\r\n\r\n    // daysUntil(date:String):Number\r\n    daysUntil: function(string, date) {\r\n        var date1 = resetTime(parseDate(string));\r\n        var date2 = resetTime(parseDate(date));\r\n        if (date1.toString() == 'Invalid' || date2.toString() == 'Invalid') return null;\r\n        return Math.round((date2 - date1) / 86400000); // 24 * 60 * 60 * 1000\r\n    },\r\n\r\n    // hoursUntil(date:String):Number\r\n    hoursUntil: function(string, date) {\r\n        var date1 = parseDate(string);\r\n        var date2 = parseDate(date);\r\n        if (date1.toString() == 'Invalid' || date2.toString() == 'Invalid') return null;\r\n        return Math.floor((date2 - date1) / 3600000); // 60 * 60 * 1000\r\n    },\r\n\r\n    // minutesUntil(date:String):Number\r\n    minutesUntil: function(string, date) {\r\n        var date1 = parseDate(string);\r\n        var date2 = parseDate(date);\r\n        if (date1.toString() == 'Invalid' || date2.toString() == 'Invalid') return null;\r\n        return Math.floor((date2 - date1) / 60000); // 60 * 1000\r\n    },\r\n\r\n    // secondsUntil(date:String):Number\r\n    secondsUntil: function(string, date) {\r\n        var date1 = parseDate(string);\r\n        var date2 = parseDate(date);\r\n        if (date1.toString() == 'Invalid' || date2.toString() == 'Invalid') return null;\r\n        return Math.floor((date2 - date1) / 1000);\r\n    },\r\n\r\n    // timeUntil(date:String, [includeHours:Boolean]):String\r\n    timeUntil: function(string, date, includeHours) {\r\n        var pad = function(n) { return (n < 10 ? '0' : '') + n; };\r\n        var date1 = parseDate(string);\r\n        var date2 = parseDate(date);\r\n        if (date1.toString() == 'Invalid' || date2.toString() == 'Invalid') return null;\r\n        var seconds = Math.floor((date2 - date1) / 1000);\r\n        var minutes = Math.floor(seconds / 60);\r\n        var hours = Math.floor(minutes / 60);\r\n        seconds -= minutes * 60;\r\n        if (includeHours) {\r\n            minutes -= hours * 60;\r\n            return pad(hours) + ':' + pad(minutes) + ':' + pad(seconds);\r\n        }\r\n        return pad(minutes) + ':' + pad(seconds);\r\n    },\r\n\r\n    toISODate: function(string) {\r\n        var date = parseDate(string);\r\n        if (date.toString() == 'Invalid Date') return null;\r\n        var pad2 = function(n) { return ('00' + n).substr(-2); };\r\n        var pad4 = function(n) { return ('0000' + n).substr(-4); };\r\n        return pad4(date.getFullYear()) + '-' + pad2(date.getMonth() + 1) + '-' + pad2(date.getDate());\r\n    },\r\n\r\n    toISOTime: function(string) {\r\n        var date = parseDate(string);\r\n        if (date.toString() == 'Invalid Date') return null;\r\n        var pad2 = function(n) { return ('00' + n).substr(-2); };\r\n        return pad2(date.getHours()) + ':' + pad2(date.getMinutes()) + ':' + pad2(date.getSeconds());\r\n    },\r\n\r\n    // formatDate(format:String):String\r\n    formatDate: function(string, format) {\r\n        var date = parseDate(string);\r\n        if (date.toString() == 'Invalid Date') return null;\r\n        var pad2 = function(n) { return ('00' + n).substr(-2); };\r\n        var pad4 = function(n) { return ('0000' + n).substr(-4); };\r\n        var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n        var monthsShort = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n        var days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n        var daysShort = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n        var year = date.getFullYear();\r\n    \tvar month = date.getMonth();\r\n    \tvar day = date.getDate();\r\n    \tvar weekday = date.getDay();\r\n    \tvar hours = date.getHours();\r\n    \tvar minutes = date.getMinutes();\r\n    \tvar seconds = date.getSeconds();\r\n        return format.replace(/[yMdHhmsaA]+/g, function(part) {\r\n            switch (part) {\r\n                case 'yyyy': return pad4(year);\r\n                case 'yy': return pad2(year);\r\n                case 'y': return year;\r\n                case 'MMMM': return months[month];\r\n                case 'MMM': return monthsShort[month];\r\n                case 'MM': return pad2(month + 1);\r\n                case 'M': return month + 1;\r\n                case 'dddd': return days[weekday];\r\n                case 'ddd': return daysShort[weekday];\r\n                case 'dd': return pad2(day);\r\n                case 'd': return day;\r\n                case 'HH': return pad2(hours);\r\n                case 'H': return hours;\r\n                case 'hh': return pad2((hours % 12) || 12);\r\n                case 'h': return (hours % 12) || 12;\r\n                case 'mm': return pad2(minutes);\r\n                case 'm': return minutes;\r\n                case 'ss': return pad2(seconds);\r\n                case 's': return seconds;\r\n                case 'a': return hours < 12 ? 'am' : 'pm';\r\n                case 'A': return hours < 12 ? 'AM' : 'PM';\r\n            }\r\n\r\n            return part;\r\n        });\r\n    },\r\n\r\n    // toTimestamp():Number\r\n    toTimestamp: function(string) {\r\n        var date = parseDate(string);\r\n        if (date.toString() == 'Invalid Date') {\r\n            return null;\r\n        }\r\n        return Math.floor(date.getTime() / 1000);\r\n    }\r\n\r\n});\r\n\r\nfunction formatLocalDate(date) {\r\n    var pad2 = function(n) { return ('00' + n).substr(-2); };\r\n    var pad4 = function(n) { return ('0000' + n).substr(-4); };\r\n    return pad4(date.getFullYear()) + '-' + pad2(date.getMonth() + 1) + '-' + pad2(date.getDate()) + ' ' + pad2(date.getHours()) + ':' + pad2(date.getMinutes()) + ':' + pad2(date.getSeconds());\r\n}\r\n\r\nfunction parseDate(string) {\r\n    var d, struct, offset = 0, n = [1,4,5,6,7,10,11];\r\n\r\n    if (string.toLowerCase() == 'now') {\r\n        return new Date();\r\n    }\r\n\r\n    if ((struct = /^(\\d{4}|[+\\-]\\d{6})(?:-(\\d{2})(?:-(\\d{2}))?)?(?:[T ](\\d{2}):(\\d{2})(?::(\\d{2})(?:\\.(\\d{3}))?)?(?:(Z)|([+\\-])(\\d{2})(?::(\\d{2}))?)?)?$/.exec(string))) {\r\n        for (var i = 0, k; (k = n[i]); ++i) {\r\n            struct[k] = +struct[k] || 0;\r\n        }\r\n\r\n        struct[2] = (+struct[2] || 1) - 1;\r\n        struct[3] = +struct[3] || 1;\r\n\r\n        if (struct[8] === undefined) {\r\n            return new Date(struct[1], struct[2], struct[3], struct[4], struct[5], struct[6], struct[7]);\r\n        } else {\r\n            if (struct[8] !== 'Z' && struct[9] !== undefined) {\r\n                offset = struct[10] * 60 + struct[11];\r\n                if (struct[9] === '+') offset = 0 - offset;\r\n            }\r\n\r\n            return new Date(Date.UTC(struct[1], struct[2], struct[3], struct[4], struct[5] + offset, struct[6], struct[7]));\r\n        }\r\n    } else if ((struct = /^(\\d{2}):(\\d{2})(?::(\\d{2}))?$/.exec(string))) {\r\n        var d = new Date();\r\n        d.setHours(+struct[1] || 0);\r\n        d.setMinutes(+struct[2] || 0);\r\n        d.setSeconds(+struct[3] || 0);\r\n        return d;\r\n    }\r\n\r\n    return new Date(string);\r\n}\r\n\r\nfunction resetTime(date) {\r\n    date.setHours(0);\r\n    date.setMinutes(0);\r\n    date.setSeconds(0);\r\n    date.setMilliseconds(0);\r\n    return date;\r\n}\r\n\r\n})();\r\n","dmx.Formatters('object', {\r\n\r\n    // keys():Array\r\n    keys: function(object) {\r\n        return Object.keys(object);\r\n    },\r\n\r\n    // values():Array\r\n    values: function(object) {\r\n        return Object.keys(object).map(function(key) {\r\n            return object[key];\r\n        });\r\n    },\r\n\r\n    // hasKey(key:String):Boolean\r\n    hasKey: function(object, key) {\r\n        return Object.keys(object).indexOf(key) !== -1;\r\n    },\r\n\r\n    // hasValue(value:Any):Boolean\r\n    hasValue: function(object, value) {\r\n        return Object.keys(object).map(function(key) {\r\n            return object[key];\r\n        }).indexOf(value) !== -1;\r\n    },\r\n\r\n    //getValueOrKey():any\r\n    getValueOrKey: function(object, key) {\r\n        return object[key] != null ? object[key] : key;\r\n    },\r\n\r\n    // default():Object\r\n    default: function(object) {\r\n        return object;\r\n    }\r\n\r\n});\r\n","dmx.Formatters('boolean', {\r\n\r\n    // default():Boolean\r\n    default: function(bool) {\r\n        return bool;\r\n    },\r\n\r\n    // toString():String\r\n    toString: function(bool) {\r\n        return String(bool);\r\n    },\r\n\r\n    // toNumber():String\r\n    toNumber: function(bool) {\r\n        return Number(bool);\r\n    },\r\n\r\n    // then(trueValue:Any, falseValue:Any):Any\r\n    then: function(bool, trueValue, falseValue) {\r\n        return bool ? trueValue : falseValue;\r\n    }\r\n\r\n});\r\n","dmx.Formatters('undefined', {\r\n\r\n    // default(value):Any\r\n    default: function(o, value) {\r\n        return value;\r\n    }\r\n\r\n});\r\n","dmx.Formatters('null', {\r\n\r\n    // default(value):Any\r\n    default: function(o, value) {\r\n        return value;\r\n    }\r\n\r\n});\r\n"]}