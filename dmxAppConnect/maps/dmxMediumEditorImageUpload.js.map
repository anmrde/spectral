{"version":3,"sources":["extensions/imageDragDrop.js","extensions/imageUpload.js","extensions/imageLeft.js","extensions/imageRight.js","extensions/imageCenter.js","extensions/imageFull.js","extensions/imageDelete.js","extensions/imageToolbar.js"],"names":["dmx","mediumEditor","Extension","init","MediumEditor","prototype","apply","this","arguments","subscribe","onAddElement","bind","onDrag","onDrop","event","elm","on","onDragStart","target","tagName","container","util","getTopBlockContainer","classList","contains","dragging","preventDefault","stopPropagation","dataTransfer","files","length","dropEffect","remove","type","isMediumEditorElement","add","imageUpload","base","getExtensionByName","alert","show","multiple","i","file","validateFile","insertImage","parentNode","insertBefore","InsertButton","contentDefault","contentFA","url","imageClass","figureClass","captionClass","buttons","insertButton","states","figcaption","checkState","node","nodeName","image","onClick","onDelete","range","document","createRange","selectNode","selection","getSelection","removeAllRanges","addRange","checkContentChanged","isImageSelected","deleteImage","setContent","html","replace","getContent","getSelectedParentElement","getSelectionRange","getSelectionStart","nextBlock","nextSibling","removeChild","select","insertHTML","createElement","style","display","getEditorOption","appendChild","click","data","FormData","append","name","xhr","XMLHttpRequest","open","send","onload","status","resData","responseText","JSON","parse","e","src","DataScope","insertAdjacentHTML","createHtml","setSelection","reader","FileReader","result","readAsDataURL","match","Button","action","aria","extensions","button","call","isAlreadyApplied","handleClick","updateToolbar","toolbar","align","allowMultiParagraphSelection","diffLeft","diffTop","firstButtonClass","lastButtonClass","standardizeSelectionStart","static","sticky","stickyTopOffset","updateOnEmptySelection","relativeContainer","initThrottledMethods","getToolbarElement","forEachExtension","iterator","context","forEach","command","createToolbar","id","getEditorId","className","createToolbarButtons","attachEventHandlers","li","btn","extension","buttonName","buttonOpts","ul","addBuiltInExtension","getButton","isElement","innerHTML","querySelectorAll","destroy","getInteractionElements","getToolbarActionsElement","querySelector","throttledPositionToolbar","throttle","isActive","positionToolbarIfShown","handleBlur","handleFocus","handleEditableClick","handleEditableKeyup","documentElement","handleDocumentMouseup","window","handleWindowScroll","handleWindowResize","isDescendant","setTimeout","clearTimeout","hideTimeout","delayShowTimeout","hideToolbar","isDisplayed","showToolbar","trigger","getFocusedElement","isToolbarDefaultActionsDisplayed","hideToolbarDefaultActions","showToolbarDefaultActions","hideExtensionForms","delay","hasForm","hideForm","multipleBlockElementsSelected","regexEmptyHTMLTags","regexBlockElements","RegExp","blockContainerElementNames","join","selectionHTML","getSelectionHtml","hasMultiParagraphs","modifySelection","selectionRange","getRangeAt","startContainer","nodeValue","startOffset","adjacentNode","findAdjacentTextNodeWithContent","getSelectionElement","offset","substr","trim","endContainer","endOffset","preventSelectionUpdates","selectionElement","getEditorElements","indexOf","getAttribute","showAndUpdateToolbar","setToolbarButtonStates","setToolbarPosition","setInactive","checkActiveButtons","manualStateChecks","queryState","updateExtensionState","setActive","queryCommandState","push","some","element","isCollapsed","positionStaticToolbar","positionToolbar","left","targetLeft","scrollTop","body","windowWidth","innerWidth","toolbarElement","containerRect","getBoundingClientRect","containerTop","top","containerCenter","width","toolbarHeight","offsetHeight","toolbarWidth","offsetWidth","halfOffsetWidth","right","Math","ceil","boundary","height","nodeType","middleBoundary","elementsContainerBoundary","containerWidth","buttonHeight","defaultLeft","elementsContainer","elementsContainerAbsolute","getComputedStyle","getPropertyValue","positions","relativeBoundary","key","pageYOffset","isNaN"],"mappings":"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","file":"../dmxMediumEditorImageUpload/dmxMediumEditorImageUpload.js","sourcesContent":["dmx.mediumEditor.Extension('image-drag-drop', {\r\n\r\n    init: function() {\r\n        MediumEditor.Extension.prototype.init.apply(this, arguments);\r\n\r\n        this.subscribe('addElement', this.onAddElement.bind(this));\r\n        this.subscribe('editableDrag', this.onDrag.bind(this));\r\n        this.subscribe('editableDrop', this.onDrop.bind(this));\r\n    },\r\n\r\n    onAddElement: function(event, elm) {\r\n        this.on(elm, 'dragstart', this.onDragStart.bind(this));\r\n    },\r\n\r\n    onDragStart: function(event) {\r\n        if (event.target.tagName == 'IMG') {\r\n            var container = MediumEditor.util.getTopBlockContainer(event.target);\r\n\r\n            if (container.classList.contains('medium-editor-image-upload')) {\r\n                this.dragging = container;\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.dragging = null;\r\n\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n    },\r\n\r\n    onDrag: function(event) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        if (event.dataTransfer.files.length) {\r\n            event.dataTransfer.dropEffect = 'copy';\r\n        }\r\n\r\n        var target = MediumEditor.util.getTopBlockContainer(event.target);\r\n\r\n        if (target) {\r\n            target.classList.remove('medium-editor-image-upload-drop');\r\n\r\n            if (event.type === 'dragover') {\r\n                if (!MediumEditor.util.isMediumEditorElement(target)) {\r\n                    target.classList.add('medium-editor-image-upload-drop');\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    onDrop: function(event) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        var target = MediumEditor.util.getTopBlockContainer(event.target);\r\n\r\n        if (target) {\r\n            target.classList.remove('medium-editor-image-upload-drop');\r\n\r\n            if (event.dataTransfer.files.length) {\r\n                var imageUpload = this.base.getExtensionByName('image-upload');\r\n\r\n                if (!imageUpload) {\r\n                    var alert = this.base.getExtensionByName('alert');\r\n                    alert.show('Error getting image upload extension.');\r\n                    return;\r\n                }\r\n\r\n\r\n                if (!MediumEditor.util.isMediumEditorElement(target)) {\r\n                    var files = event.dataTransfer.files;\r\n\r\n                    if (!imageUpload.multiple && files.length > 1) {\r\n                        var alert = this.base.getExtensionByName('alert');\r\n                        alert.show('Only 1 file please!');\r\n                        return;\r\n                    }\r\n\r\n                    for (var i = 0; i < files.length; i++) {\r\n                        var file = files[i];\r\n\r\n                        if (imageUpload.validateFile(file)) {\r\n                            imageUpload.insertImage(target, file);\r\n                        }\r\n                    }\r\n                }\r\n            } else if (this.dragging) {\r\n                target.parentNode.insertBefore(this.dragging, target);\r\n            }\r\n        }\r\n\r\n        this.dragging = null;\r\n    }\r\n\r\n});\r\n","dmx.mediumEditor.InsertButton('image-upload', {\r\n\r\n    contentDefault: '<b>IMG</b>',\r\n    contentFA: '<i class=\"fa fa-camera\"></i>',\r\n\r\n    multiple: true,\r\n    url: '',\r\n    imageClass: '',\r\n    figureClass: '',\r\n    captionClass: '',\r\n    buttons: ['imageLeft', 'imageCenter', 'imageRight', 'imageFull', 'imageDelete'],\r\n\r\n    init: function() {\r\n        dmx.mediumEditor.insertButton.prototype.init.apply(this, arguments);\r\n\r\n        dmx.mediumEditor.states.figcaption = {\r\n            buttons: ['bold', 'italic', 'underline', 'strikethrough', 'subscript', 'superscript', 'anchor', 'removeFormat'],\r\n            checkState: function(node) {\r\n                return node.nodeName == 'FIGCAPTION';\r\n            }\r\n        };\r\n\r\n        dmx.mediumEditor.states.image = {\r\n            buttons: this.buttons,\r\n            checkState: function(node) {\r\n                return node.nodeName == 'IMG';\r\n            }\r\n        }\r\n\r\n        this.subscribe('editableClick', this.onClick.bind(this));\r\n        this.subscribe('editableKeydownDelete', this.onDelete.bind(this));\r\n    },\r\n\r\n    onClick: function(event) {\r\n        if (event.target && event.target.nodeName == 'IMG') {\r\n            var range = this.document.createRange();\r\n            range.selectNode(event.target);\r\n\r\n            var selection  = this.document.getSelection();\r\n            selection.removeAllRanges();\r\n            selection.addRange(range);\r\n\r\n            this.base.checkContentChanged();\r\n\r\n            /*var self = this;\r\n            setTimeout(function() {\r\n                var toolbar = self.base.getExtensionByName('imageToolbar');\r\n                toolbar.showAndUpdateToolbar();\r\n            }, 0);*/\r\n        }\r\n    },\r\n\r\n    onDelete: function(event) {\r\n        if (this.isImageSelected()) {\r\n            event.preventDefault();\r\n            this.deleteImage();\r\n        }\r\n    },\r\n\r\n    setContent: function (html) {\r\n        return html\r\n            .replace(/<div([^>]*)>\\s*<figure/gi, '<div$1 contenteditable=\"false\"><figure')\r\n            .replace(/<figcaption([^>]*)>/gi, '<figcaption$1 contenteditable=\"true\">')\r\n            .replace(/<\\/div>\\s*$/gi, '</div><p><br></p>');\r\n    },\r\n\r\n    getContent: function (html) {\r\n        return html\r\n            .replace(/contenteditable=\"[^\"]*\"/gi, '')\r\n            .replace(/\\s*<p[^>]*>\\s*<br[^>]*>\\s*<\\/p[^>]*>\\s*$/gi, '');\r\n    },\r\n\r\n    isImageSelected: function() {\r\n        return MediumEditor.selection.getSelectedParentElement(MediumEditor.selection.getSelectionRange(this.document)).nodeName == 'IMG';\r\n    },\r\n\r\n    deleteImage: function() {\r\n        var container = MediumEditor.util.getTopBlockContainer(MediumEditor.selection.getSelectionStart(this.document));\r\n        var nextBlock = container.nextSibling;\r\n        container.parentNode.removeChild(container);\r\n        MediumEditor.selection.select(this.document, nextBlock);\r\n        this.base.checkContentChanged();\r\n    },\r\n\r\n    insertHTML: function(elm) {\r\n        var file = this.document.createElement('input');\r\n        file.style.display = 'none';\r\n        file.multiple = this.multiple;\r\n        file.type = 'file';\r\n        this.on(file, 'change', (function(event) {\r\n            var files = event.target.files;\r\n\r\n            for (var i = 0; i < files.length; i++) {\r\n                var file = files[i];\r\n\r\n                if (!this.multiple && files.length > 1) {\r\n                    var alert = this.base.getExtensionByName('alert');\r\n                    alert.show('Only 1 file please!');\r\n                    return;\r\n                }\r\n\r\n                if (this.validateFile(file)) {\r\n                    this.insertImage(elm, file);\r\n                }\r\n            }\r\n        }).bind(this));\r\n        this.getEditorOption('elementsContainer').appendChild(file);\r\n        file.click();\r\n    },\r\n\r\n    insertImage: function(elm, file) {\r\n        if (!this.url) {\r\n            var reader = new FileReader();\r\n            reader.onload = function(e) {\r\n                elm.insertAdjacentHTML('beforebegin', this.createHtml(e.target.result));\r\n                //this.base.checkContentChanged();\r\n                this.setSelection();\r\n            }.bind(this);\r\n            reader.readAsDataURL(file);\r\n        } else {\r\n            var data = new FormData();\r\n            data.append('image', file, file.name);\r\n\r\n            var xhr = new XMLHttpRequest();\r\n            xhr.open('POST', this.url, true);\r\n            xhr.send(data);\r\n            xhr.onload = (function() {\r\n                if (xhr.status == 200) {\r\n                    var resData = xhr.responseText;\r\n\r\n                    try {\r\n                        resData = JSON.parse(resData);\r\n                    } catch(e) {\r\n                        var alert = this.base.getExtensionByName('alert');\r\n                        alert.show('Invalid response from server.');\r\n                        return;\r\n                    }\r\n                    var src = dmx.parse('url', new dmx.DataScope(resData));\r\n                    elm.insertAdjacentHTML('beforebegin', this.createHtml(src));\r\n                    //this.base.checkContentChanged();\r\n                    this.setSelection();\r\n                } else {\r\n                    var alert = this.base.getExtensionByName('alert');\r\n                    alert.show('Error uploading image.');\r\n                }\r\n            }).bind(this);\r\n        }\r\n    },\r\n\r\n    validateFile: function(file) {\r\n        return !!file.type.match('image.*');\r\n    },\r\n\r\n    createHtml: function(src) {\r\n        return '<div contenteditable=\"false\" class=\"medium-editor-image-upload medium-editor-image-upload-center\"><figure class=\"' + this.figureClass + '\"><img class=\"' + this.imageClass + '\" src=\"' + src + '\"><figcaption class=\"' + this.captionClass + '\" contenteditable=\"true\" data-placeholder=\"Image caption\"></figcaption></figure></div>';\r\n    }\r\n\r\n});\r\n","dmx.mediumEditor.Button('imageLeft', {\r\n    contentDefault: '<b>Left</b>',\r\n    contentFA: '<i class=\"fa fa-align-left\"></i>',\r\n    action: 'float-left',\r\n    aria: 'Align image left',\r\n\r\n    init: function() {\r\n        MediumEditor.extensions.button.prototype.init.call(this);\r\n    },\r\n\r\n    isAlreadyApplied: function(node) {\r\n        return node.classList.contains('medium-editor-image-upload-left');\r\n    },\r\n\r\n    handleClick: function(event) {\r\n        var container = MediumEditor.util.getTopBlockContainer(MediumEditor.selection.getSelectionStart(this.document));\r\n        if (container.classList.contains('medium-editor-image-upload')) {\r\n            container.classList.remove('medium-editor-image-upload-right','medium-editor-image-upload-center','medium-editor-image-upload-full');\r\n            container.classList.add('medium-editor-image-upload-left');\r\n        }\r\n        this.updateToolbar();\r\n    },\r\n\r\n    updateToolbar: function() {\r\n        var toolbar = this.base.getExtensionByName('image-toolbar');\r\n        if (toolbar) {\r\n            toolbar.checkState();\r\n        }\r\n    }\r\n});\r\n","dmx.mediumEditor.Button('imageRight', {\r\n    contentDefault: '<b>Right</b>',\r\n    contentFA: '<i class=\"fa fa-align-right\"></i>',\r\n    action: 'float-right',\r\n    aria: 'Align image right',\r\n\r\n    init: function() {\r\n        MediumEditor.extensions.button.prototype.init.call(this);\r\n    },\r\n\r\n    isAlreadyApplied: function(node) {\r\n        return node.classList.contains('medium-editor-image-upload-right');\r\n    },\r\n\r\n    handleClick: function(event) {\r\n        var container = MediumEditor.util.getTopBlockContainer(MediumEditor.selection.getSelectionStart(this.document));\r\n        if (container.classList.contains('medium-editor-image-upload')) {\r\n            container.classList.remove('medium-editor-image-upload-left','medium-editor-image-upload-center','medium-editor-image-upload-full');\r\n            container.classList.add('medium-editor-image-upload-right');\r\n        }\r\n        this.updateToolbar();\r\n    },\r\n\r\n    updateToolbar: function() {\r\n        var toolbar = this.base.getExtensionByName('image-toolbar');\r\n        if (toolbar) {\r\n            toolbar.checkState();\r\n        }\r\n    }\r\n});\r\n","dmx.mediumEditor.Button('imageCenter', {\r\n    contentDefault: '<b>Center</b>',\r\n    contentFA: '<i class=\"fa fa-align-center\"></i>',\r\n    action: 'image-center',\r\n    aria: 'Align image center',\r\n\r\n    init: function() {\r\n        MediumEditor.extensions.button.prototype.init.call(this);\r\n    },\r\n\r\n    isAlreadyApplied: function(node) {\r\n        return node.classList.contains('medium-editor-image-upload-center');\r\n    },\r\n\r\n    handleClick: function(event) {\r\n        var container = MediumEditor.util.getTopBlockContainer(MediumEditor.selection.getSelectionStart(this.document));\r\n        if (container.classList.contains('medium-editor-image-upload')) {\r\n            container.classList.remove('medium-editor-image-upload-left','medium-editor-image-upload-right','medium-editor-image-upload-full');\r\n            container.classList.add('medium-editor-image-upload-center');\r\n        }\r\n        this.updateToolbar();\r\n    },\r\n\r\n    updateToolbar: function() {\r\n        var toolbar = this.base.getExtensionByName('image-toolbar');\r\n        if (toolbar) {\r\n            toolbar.checkState();\r\n        }\r\n    }\r\n});\r\n","dmx.mediumEditor.Button('imageFull', {\r\n    contentDefault: '<b>100%</b>',\r\n    contentFA: '<i class=\"fa fa-align-justify\"></i>',\r\n    action: 'image-full',\r\n    aria: 'Image full width',\r\n\r\n    init: function() {\r\n        MediumEditor.extensions.button.prototype.init.call(this);\r\n    },\r\n\r\n    isAlreadyApplied: function(node) {\r\n        return node.classList.contains('medium-editor-image-upload-full');\r\n    },\r\n\r\n    handleClick: function(event) {\r\n        var container = MediumEditor.util.getTopBlockContainer(MediumEditor.selection.getSelectionStart(this.document));\r\n        if (container.classList.contains('medium-editor-image-upload')) {\r\n            container.classList.remove('medium-editor-image-upload-left','medium-editor-image-upload-right','medium-editor-image-upload-center');\r\n            container.classList.add('medium-editor-image-upload-full');\r\n        }\r\n        this.updateToolbar();\r\n    },\r\n\r\n    updateToolbar: function() {\r\n        var toolbar = this.base.getExtensionByName('image-toolbar');\r\n        if (toolbar) {\r\n            toolbar.checkState();\r\n        }\r\n    }\r\n});\r\n","dmx.mediumEditor.Button('imageDelete', {\r\n    contentDefault: '<b>Remove</b>',\r\n    contentFA: '<i class=\"fa fa-trash\"></i>',\r\n    action: 'delete-image',\r\n    aria: 'Remove image',\r\n\r\n    init: function() {\r\n        MediumEditor.extensions.button.prototype.init.call(this);\r\n    },\r\n\r\n    handleClick: function(event) {\r\n        var container = MediumEditor.util.getTopBlockContainer(MediumEditor.selection.getSelectionStart(this.document));\r\n        var nextBlock = container.nextSibling;\r\n        container.parentNode.removeChild(container);\r\n        MediumEditor.selection.select(this.document, nextBlock);\r\n        this.updateToolbar();\r\n        this.base.checkContentChanged();\r\n    },\r\n\r\n    updateToolbar: function() {\r\n        var toolbar = this.base.getExtensionByName('image-toolbar');\r\n        if (toolbar) {\r\n            toolbar.checkState();\r\n        }\r\n    }\r\n});\r\n","dmx.mediumEditor.Extension('image-toolbar', {\r\n    /* Toolbar Options */\r\n\r\n    /* align: ['left'|'center'|'right']\r\n     * When the __static__ option is true, this aligns the static toolbar\r\n     * relative to the medium-editor element.\r\n     */\r\n    align: 'center',\r\n\r\n    /* allowMultiParagraphSelection: [boolean]\r\n     * enables/disables whether the toolbar should be displayed when\r\n     * selecting multiple paragraphs/block elements\r\n     */\r\n    allowMultiParagraphSelection: true,\r\n\r\n    /* buttons: [Array]\r\n     * the names of the set of buttons to display on the toolbar.\r\n     */\r\n    buttons: ['imageLeft', 'imageCenter', 'imageRight', 'imageFull', 'imageDelete'],\r\n\r\n    /* diffLeft: [Number]\r\n     * value in pixels to be added to the X axis positioning of the toolbar.\r\n     */\r\n    diffLeft: 0,\r\n\r\n    /* diffTop: [Number]\r\n     * value in pixels to be added to the Y axis positioning of the toolbar.\r\n     */\r\n    diffTop: -10,\r\n\r\n    /* firstButtonClass: [string]\r\n     * CSS class added to the first button in the toolbar.\r\n     */\r\n    firstButtonClass: 'medium-editor-button-first',\r\n\r\n    /* lastButtonClass: [string]\r\n     * CSS class added to the last button in the toolbar.\r\n     */\r\n    lastButtonClass: 'medium-editor-button-last',\r\n\r\n    /* standardizeSelectionStart: [boolean]\r\n     * enables/disables standardizing how the beginning of a range is decided\r\n     * between browsers whenever the selected text is analyzed for updating toolbar buttons status.\r\n     */\r\n    standardizeSelectionStart: false,\r\n\r\n    /* static: [boolean]\r\n     * enable/disable the toolbar always displaying in the same location\r\n     * relative to the medium-editor element.\r\n     */\r\n    static: false,\r\n\r\n    /* sticky: [boolean]\r\n     * When the __static__ option is true, this enables/disables the toolbar\r\n     * \"sticking\" to the viewport and staying visible on the screen while\r\n     * the page scrolls.\r\n     */\r\n    sticky: false,\r\n\r\n    /* stickyTopOffset: [Number]\r\n     * Value in pixel of the top offset above the toolbar\r\n     */\r\n    stickyTopOffset: 0,\r\n\r\n    /* updateOnEmptySelection: [boolean]\r\n     * When the __static__ option is true, this enables/disables updating\r\n     * the state of the toolbar buttons even when the selection is collapsed\r\n     * (there is no selection, just a cursor).\r\n     */\r\n    updateOnEmptySelection: false,\r\n\r\n    /* relativeContainer: [node]\r\n     * appending the toolbar to a given node instead of body\r\n     */\r\n    relativeContainer: null,\r\n\r\n    init: function () {\r\n        MediumEditor.Extension.prototype.init.apply(this, arguments);\r\n\r\n        this.initThrottledMethods();\r\n\r\n        if (!this.relativeContainer) {\r\n            this.getEditorOption('elementsContainer').appendChild(this.getToolbarElement());\r\n        } else {\r\n            this.relativeContainer.appendChild(this.getToolbarElement());\r\n        }\r\n    },\r\n\r\n    // Helper method to execute method for every extension, but ignoring the toolbar extension\r\n    forEachExtension: function (iterator, context) {\r\n        return this.base.extensions.forEach(function (command) {\r\n            if (command === this) {\r\n                return;\r\n            }\r\n            return iterator.apply(context || this, arguments);\r\n        }, this);\r\n    },\r\n\r\n    // Toolbar creation/deletion\r\n\r\n    createToolbar: function () {\r\n        var toolbar = this.document.createElement('div');\r\n\r\n        toolbar.id = 'medium-editor-image-toolbar-' + this.getEditorId();\r\n        toolbar.className = 'medium-editor-toolbar';\r\n\r\n        if (this.static) {\r\n            toolbar.className += ' static-toolbar';\r\n        } else if (this.relativeContainer) {\r\n            toolbar.className += ' medium-editor-relative-toolbar';\r\n        } else {\r\n            toolbar.className += ' medium-editor-stalker-toolbar';\r\n        }\r\n\r\n        toolbar.appendChild(this.createToolbarButtons());\r\n\r\n        this.attachEventHandlers();\r\n\r\n        return toolbar;\r\n    },\r\n\r\n    createToolbarButtons: function () {\r\n        var ul = this.document.createElement('ul'),\r\n            li,\r\n            btn,\r\n            buttons,\r\n            extension,\r\n            buttonName,\r\n            buttonOpts;\r\n\r\n        ul.id = 'medium-editor-toolbar-actions' + this.getEditorId();\r\n        ul.className = 'medium-editor-toolbar-actions';\r\n        ul.style.display = 'block';\r\n\r\n        this.buttons.forEach(function (button) {\r\n            if (typeof button === 'string') {\r\n                buttonName = button;\r\n                buttonOpts = null;\r\n            } else {\r\n                buttonName = button.name;\r\n                buttonOpts = button;\r\n            }\r\n\r\n            // If the button already exists as an extension, it'll be returned\r\n            // othwerise it'll create the default built-in button\r\n            extension = this.base.addBuiltInExtension(buttonName, buttonOpts);\r\n\r\n            if (extension && typeof extension.getButton === 'function') {\r\n                btn = extension.getButton(this.base);\r\n                li = this.document.createElement('li');\r\n                if (MediumEditor.util.isElement(btn)) {\r\n                    li.appendChild(btn);\r\n                } else {\r\n                    li.innerHTML = btn;\r\n                }\r\n                ul.appendChild(li);\r\n            }\r\n        }, this);\r\n\r\n        buttons = ul.querySelectorAll('button');\r\n        if (buttons.length > 0) {\r\n            buttons[0].classList.add(this.firstButtonClass);\r\n            buttons[buttons.length - 1].classList.add(this.lastButtonClass);\r\n        }\r\n\r\n        return ul;\r\n    },\r\n\r\n    destroy: function () {\r\n        if (this.toolbar) {\r\n            if (this.toolbar.parentNode) {\r\n                this.toolbar.parentNode.removeChild(this.toolbar);\r\n            }\r\n            delete this.toolbar;\r\n        }\r\n    },\r\n\r\n    // Toolbar accessors\r\n\r\n    getInteractionElements: function () {\r\n        return [this.getToolbarElement()];\r\n    },\r\n\r\n    getToolbarElement: function () {\r\n        if (!this.toolbar) {\r\n            this.toolbar = this.createToolbar();\r\n        }\r\n\r\n        return this.toolbar;\r\n    },\r\n\r\n    getToolbarActionsElement: function () {\r\n        return this.getToolbarElement().querySelector('.medium-editor-toolbar-actions');\r\n    },\r\n\r\n    // Toolbar event handlers\r\n\r\n    initThrottledMethods: function () {\r\n        // throttledPositionToolbar is throttled because:\r\n        // - It will be called when the browser is resizing, which can fire many times very quickly\r\n        // - For some event (like resize) a slight lag in UI responsiveness is OK and provides performance benefits\r\n        this.throttledPositionToolbar = MediumEditor.util.throttle(function () {\r\n            if (this.base.isActive) {\r\n                this.positionToolbarIfShown();\r\n            }\r\n        }.bind(this));\r\n    },\r\n\r\n    attachEventHandlers: function () {\r\n        // MediumEditor custom events for when user beings and ends interaction with a contenteditable and its elements\r\n        this.subscribe('blur', this.handleBlur.bind(this));\r\n        this.subscribe('focus', this.handleFocus.bind(this));\r\n\r\n        // Updating the state of the toolbar as things change\r\n        this.subscribe('editableClick', this.handleEditableClick.bind(this));\r\n        this.subscribe('editableKeyup', this.handleEditableKeyup.bind(this));\r\n\r\n        // Handle mouseup on document for updating the selection in the toolbar\r\n        this.on(this.document.documentElement, 'mouseup', this.handleDocumentMouseup.bind(this));\r\n\r\n        // Add a scroll event for sticky toolbar\r\n        if (this.static && this.sticky) {\r\n            // On scroll (capture), re-position the toolbar\r\n            this.on(this.window, 'scroll', this.handleWindowScroll.bind(this), true);\r\n        }\r\n\r\n        // On resize, re-position the toolbar\r\n        this.on(this.window, 'resize', this.handleWindowResize.bind(this));\r\n    },\r\n\r\n    handleWindowScroll: function () {\r\n        this.positionToolbarIfShown();\r\n    },\r\n\r\n    handleWindowResize: function () {\r\n        this.throttledPositionToolbar();\r\n    },\r\n\r\n    handleDocumentMouseup: function (event) {\r\n        // Do not trigger checkState when mouseup fires over the toolbar\r\n        if (event && event.target && MediumEditor.util.isDescendant(this.getToolbarElement(), event.target)) {\r\n            return false;\r\n        }\r\n        this.checkState();\r\n    },\r\n\r\n    handleEditableClick: function () {\r\n        // Delay the call to checkState to handle bug where selection is empty\r\n        // immediately after clicking inside a pre-existing selection\r\n        setTimeout(function () {\r\n            this.checkState();\r\n        }.bind(this), 0);\r\n    },\r\n\r\n    handleEditableKeyup: function () {\r\n        this.checkState();\r\n    },\r\n\r\n    handleBlur: function () {\r\n        // Kill any previously delayed calls to hide the toolbar\r\n        clearTimeout(this.hideTimeout);\r\n\r\n        // Blur may fire even if we have a selection, so we want to prevent any delayed showToolbar\r\n        // calls from happening in this specific case\r\n        clearTimeout(this.delayShowTimeout);\r\n\r\n        // Delay the call to hideToolbar to handle bug with multiple editors on the page at once\r\n        this.hideTimeout = setTimeout(function () {\r\n            this.hideToolbar();\r\n        }.bind(this), 1);\r\n    },\r\n\r\n    handleFocus: function () {\r\n        this.checkState();\r\n    },\r\n\r\n    // Hiding/showing toolbar\r\n\r\n    isDisplayed: function () {\r\n        return this.getToolbarElement().classList.contains('medium-editor-toolbar-active');\r\n    },\r\n\r\n    showToolbar: function () {\r\n        clearTimeout(this.hideTimeout);\r\n        if (!this.isDisplayed()) {\r\n            this.getToolbarElement().classList.add('medium-editor-toolbar-active');\r\n            this.trigger('showToolbar', {}, this.base.getFocusedElement());\r\n        }\r\n    },\r\n\r\n    hideToolbar: function () {\r\n        if (this.isDisplayed()) {\r\n            this.getToolbarElement().classList.remove('medium-editor-toolbar-active');\r\n            this.trigger('hideToolbar', {}, this.base.getFocusedElement());\r\n        }\r\n    },\r\n\r\n    isToolbarDefaultActionsDisplayed: function () {\r\n        return this.getToolbarActionsElement().style.display === 'block';\r\n    },\r\n\r\n    hideToolbarDefaultActions: function () {\r\n        if (this.isToolbarDefaultActionsDisplayed()) {\r\n            this.getToolbarActionsElement().style.display = 'none';\r\n        }\r\n    },\r\n\r\n    showToolbarDefaultActions: function () {\r\n        this.hideExtensionForms();\r\n\r\n        if (!this.isToolbarDefaultActionsDisplayed()) {\r\n            this.getToolbarActionsElement().style.display = 'block';\r\n        }\r\n\r\n        // Using setTimeout + options.delay because:\r\n        // We will actually be displaying the toolbar, which should be controlled by options.delay\r\n        this.delayShowTimeout = this.base.delay(function () {\r\n            this.showToolbar();\r\n        }.bind(this));\r\n    },\r\n\r\n    hideExtensionForms: function () {\r\n        // Hide all extension forms\r\n        this.forEachExtension(function (extension) {\r\n            if (extension.hasForm && extension.isDisplayed()) {\r\n                extension.hideForm();\r\n            }\r\n        });\r\n    },\r\n\r\n    // Responding to changes in user selection\r\n\r\n    // Checks for existance of multiple block elements in the current selection\r\n    multipleBlockElementsSelected: function () {\r\n        var regexEmptyHTMLTags = /<[^\\/>][^>]*><\\/[^>]+>/gim, // http://stackoverflow.com/questions/3129738/remove-empty-tags-using-regex\r\n            regexBlockElements = new RegExp('<(' + MediumEditor.util.blockContainerElementNames.join('|') + ')[^>]*>', 'g'),\r\n            selectionHTML = MediumEditor.selection.getSelectionHtml(this.document).replace(regexEmptyHTMLTags, ''), // Filter out empty blocks from selection\r\n            hasMultiParagraphs = selectionHTML.match(regexBlockElements); // Find how many block elements are within the html\r\n\r\n        return !!hasMultiParagraphs && hasMultiParagraphs.length > 1;\r\n    },\r\n\r\n    modifySelection: function () {\r\n        var selection = this.window.getSelection(),\r\n            selectionRange = selection.getRangeAt(0);\r\n\r\n        /*\r\n        * In firefox, there are cases (ie doubleclick of a word) where the selectionRange start\r\n        * will be at the very end of an element.  In other browsers, the selectionRange start\r\n        * would instead be at the very beginning of an element that actually has content.\r\n        * example:\r\n        *   <span>foo</span><span>bar</span>\r\n        *\r\n        * If the text 'bar' is selected, most browsers will have the selectionRange start at the beginning\r\n        * of the 'bar' span.  However, there are cases where firefox will have the selectionRange start\r\n        * at the end of the 'foo' span.  The contenteditable behavior will be ok, but if there are any\r\n        * properties on the 'bar' span, they won't be reflected accurately in the toolbar\r\n        * (ie 'Bold' button wouldn't be active)\r\n        *\r\n        * So, for cases where the selectionRange start is at the end of an element/node, find the next\r\n        * adjacent text node that actually has content in it, and move the selectionRange start there.\r\n        */\r\n        if (this.standardizeSelectionStart &&\r\n                selectionRange.startContainer.nodeValue &&\r\n                (selectionRange.startOffset === selectionRange.startContainer.nodeValue.length)) {\r\n            var adjacentNode = MediumEditor.util.findAdjacentTextNodeWithContent(MediumEditor.selection.getSelectionElement(this.window), selectionRange.startContainer, this.document);\r\n            if (adjacentNode) {\r\n                var offset = 0;\r\n                while (adjacentNode.nodeValue.substr(offset, 1).trim().length === 0) {\r\n                    offset = offset + 1;\r\n                }\r\n                selectionRange = MediumEditor.selection.select(this.document, adjacentNode, offset,\r\n                    selectionRange.endContainer, selectionRange.endOffset);\r\n            }\r\n        }\r\n    },\r\n\r\n    checkState: function () {\r\n        if (this.base.preventSelectionUpdates) {\r\n            return;\r\n        }\r\n\r\n        // If no editable has focus\r\n        // hide toolbar\r\n        if (!this.base.getFocusedElement()) {\r\n            return this.hideToolbar();\r\n        }\r\n\r\n        // If there's no selection element, selection element doesn't belong to this editor\r\n        // or toolbar is disabled for this selection element\r\n        // hide toolbar\r\n        var selectionElement = MediumEditor.selection.getSelectionElement(this.window);\r\n        if (!selectionElement ||\r\n                this.getEditorElements().indexOf(selectionElement) === -1 ||\r\n                selectionElement.getAttribute('data-disable-toolbar')) {\r\n            return this.hideToolbar();\r\n        }\r\n\r\n        // Now we know there's a focused editable with a selection\r\n\r\n        if (MediumEditor.selection.getSelectedParentElement(MediumEditor.selection.getSelectionRange(this.document)).nodeName == 'IMG') {\r\n            this.showAndUpdateToolbar();\r\n        }\r\n\r\n        this.hideToolbar();\r\n    },\r\n\r\n    // Updating the toolbar\r\n\r\n    showAndUpdateToolbar: function () {\r\n        this.modifySelection();\r\n        this.setToolbarButtonStates();\r\n        this.trigger('positionToolbar', {}, this.base.getFocusedElement());\r\n        this.showToolbarDefaultActions();\r\n        this.setToolbarPosition();\r\n    },\r\n\r\n    setToolbarButtonStates: function () {\r\n        this.forEachExtension(function (extension) {\r\n            if (typeof extension.isActive === 'function' &&\r\n                typeof extension.setInactive === 'function') {\r\n                extension.setInactive();\r\n            }\r\n        });\r\n\r\n        this.checkActiveButtons();\r\n    },\r\n\r\n    checkActiveButtons: function () {\r\n        var manualStateChecks = [],\r\n            queryState = null,\r\n            selectionRange = MediumEditor.selection.getSelectionRange(this.document),\r\n            parentNode,\r\n            updateExtensionState = function (extension) {\r\n                if (typeof extension.checkState === 'function') {\r\n                    extension.checkState(parentNode);\r\n                } else if (typeof extension.isActive === 'function' &&\r\n                           typeof extension.isAlreadyApplied === 'function' &&\r\n                           typeof extension.setActive === 'function') {\r\n                    if (!extension.isActive() && extension.isAlreadyApplied(parentNode)) {\r\n                        extension.setActive();\r\n                    }\r\n                }\r\n            };\r\n\r\n        if (!selectionRange) {\r\n            return;\r\n        }\r\n\r\n        // Loop through all extensions\r\n        this.forEachExtension(function (extension) {\r\n            // For those extensions where we can use document.queryCommandState(), do so\r\n            if (typeof extension.queryCommandState === 'function') {\r\n                queryState = extension.queryCommandState();\r\n                // If queryCommandState returns a valid value, we can trust the browser\r\n                // and don't need to do our manual checks\r\n                if (queryState !== null) {\r\n                    if (queryState && typeof extension.setActive === 'function') {\r\n                        extension.setActive();\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n            // We can't use queryCommandState for this extension, so add to manualStateChecks\r\n            manualStateChecks.push(extension);\r\n        });\r\n\r\n        parentNode = MediumEditor.selection.getSelectedParentElement(selectionRange);\r\n\r\n        // Make sure the selection parent isn't outside of the contenteditable\r\n        if (!this.getEditorElements().some(function (element) {\r\n                return MediumEditor.util.isDescendant(element, parentNode, true);\r\n            })) {\r\n            return;\r\n        }\r\n\r\n        // Climb up the DOM and do manual checks for whether a certain extension is currently enabled for this node\r\n        while (parentNode) {\r\n            manualStateChecks.forEach(updateExtensionState);\r\n\r\n            // we can abort the search upwards if we leave the contentEditable element\r\n            if (MediumEditor.util.isMediumEditorElement(parentNode)) {\r\n                break;\r\n            }\r\n            parentNode = parentNode.parentNode;\r\n        }\r\n    },\r\n\r\n    // Positioning toolbar\r\n\r\n    positionToolbarIfShown: function () {\r\n        if (this.isDisplayed()) {\r\n            this.setToolbarPosition();\r\n        }\r\n    },\r\n\r\n    setToolbarPosition: function () {\r\n        var container = this.base.getFocusedElement(),\r\n            selection = this.window.getSelection();\r\n\r\n        // If there isn't a valid selection, bail\r\n        if (!container) {\r\n            return this;\r\n        }\r\n\r\n        if (this.static || !selection.isCollapsed) {\r\n            // we don't need any absolute positioning if relativeContainer is set\r\n            if (!this.relativeContainer) {\r\n                if (this.static) {\r\n                    this.positionStaticToolbar(container);\r\n                } else {\r\n                    this.positionToolbar(selection);\r\n                }\r\n            }\r\n\r\n            this.trigger('positionedToolbar', {}, this.base.getFocusedElement());\r\n\r\n            this.showToolbar();\r\n        }\r\n    },\r\n\r\n    positionStaticToolbar: function (container) {\r\n        // position the toolbar at left 0, so we can get the real width of the toolbar\r\n        this.getToolbarElement().style.left = '0';\r\n\r\n        // document.documentElement for IE 9\r\n        var scrollTop = (this.document.documentElement && this.document.documentElement.scrollTop) || this.document.body.scrollTop,\r\n            windowWidth = this.window.innerWidth,\r\n            toolbarElement = this.getToolbarElement(),\r\n            containerRect = container.getBoundingClientRect(),\r\n            containerTop = containerRect.top + scrollTop,\r\n            containerCenter = (containerRect.left + (containerRect.width / 2)),\r\n            toolbarHeight = toolbarElement.offsetHeight,\r\n            toolbarWidth = toolbarElement.offsetWidth,\r\n            halfOffsetWidth = toolbarWidth / 2,\r\n            targetLeft;\r\n\r\n        if (this.sticky) {\r\n            // If it's beyond the height of the editor, position it at the bottom of the editor\r\n            if (scrollTop > (containerTop + container.offsetHeight - toolbarHeight - this.stickyTopOffset)) {\r\n                toolbarElement.style.top = (containerTop + container.offsetHeight - toolbarHeight) + 'px';\r\n                toolbarElement.classList.remove('medium-editor-sticky-toolbar');\r\n            // Stick the toolbar to the top of the window\r\n            } else if (scrollTop > (containerTop - toolbarHeight - this.stickyTopOffset)) {\r\n                toolbarElement.classList.add('medium-editor-sticky-toolbar');\r\n                toolbarElement.style.top = this.stickyTopOffset + 'px';\r\n            // Normal static toolbar position\r\n            } else {\r\n                toolbarElement.classList.remove('medium-editor-sticky-toolbar');\r\n                toolbarElement.style.top = containerTop - toolbarHeight + 'px';\r\n            }\r\n        } else {\r\n            toolbarElement.style.top = containerTop - toolbarHeight + 'px';\r\n        }\r\n\r\n        switch (this.align) {\r\n            case 'left':\r\n                targetLeft = containerRect.left;\r\n                break;\r\n\r\n            case 'right':\r\n                targetLeft = containerRect.right - toolbarWidth;\r\n                break;\r\n\r\n            case 'center':\r\n                targetLeft = containerCenter - halfOffsetWidth;\r\n                break;\r\n        }\r\n\r\n        if (targetLeft < 0) {\r\n            targetLeft = 0;\r\n        } else if ((targetLeft + toolbarWidth) > windowWidth) {\r\n            targetLeft = (windowWidth - Math.ceil(toolbarWidth) - 1);\r\n        }\r\n\r\n        toolbarElement.style.left = targetLeft + 'px';\r\n    },\r\n\r\n    positionToolbar: function (selection) {\r\n        // position the toolbar at left 0, so we can get the real width of the toolbar\r\n        this.getToolbarElement().style.left = '0';\r\n        this.getToolbarElement().style.right = 'initial';\r\n\r\n        var range = selection.getRangeAt(0),\r\n            boundary = range.getBoundingClientRect();\r\n\r\n        // Handle selections with just images\r\n        if (!boundary || ((boundary.height === 0 && boundary.width === 0) && range.startContainer === range.endContainer)) {\r\n            // If there's a nested image, use that for the bounding rectangle\r\n            if (range.startContainer.nodeType === 1 && range.startContainer.querySelector('img')) {\r\n                boundary = range.startContainer.querySelector('img').getBoundingClientRect();\r\n            } else {\r\n                boundary = range.startContainer.getBoundingClientRect();\r\n            }\r\n        }\r\n\r\n        var containerWidth = this.window.innerWidth,\r\n            toolbarElement = this.getToolbarElement(),\r\n            toolbarHeight = toolbarElement.offsetHeight,\r\n            toolbarWidth = toolbarElement.offsetWidth,\r\n            halfOffsetWidth = toolbarWidth / 2,\r\n            buttonHeight = 50,\r\n            defaultLeft = this.diffLeft - halfOffsetWidth,\r\n            elementsContainer = this.getEditorOption('elementsContainer'),\r\n            elementsContainerAbsolute = ['absolute', 'fixed'].indexOf(window.getComputedStyle(elementsContainer).getPropertyValue('position')) > -1,\r\n            positions = {},\r\n            relativeBoundary = {},\r\n            middleBoundary, elementsContainerBoundary;\r\n\r\n        // If container element is absolute / fixed, recalculate boundaries to be relative to the container\r\n        if (elementsContainerAbsolute) {\r\n            elementsContainerBoundary = elementsContainer.getBoundingClientRect();\r\n            ['top', 'left'].forEach(function (key) {\r\n                relativeBoundary[key] = boundary[key] - elementsContainerBoundary[key];\r\n            });\r\n\r\n            relativeBoundary.width = boundary.width;\r\n            relativeBoundary.height = boundary.height;\r\n            boundary = relativeBoundary;\r\n\r\n            containerWidth = elementsContainerBoundary.width;\r\n\r\n            // Adjust top position according to container scroll position\r\n            positions.top = elementsContainer.scrollTop;\r\n        } else {\r\n            // Adjust top position according to window scroll position\r\n            positions.top = this.window.pageYOffset;\r\n        }\r\n\r\n        middleBoundary = boundary.left + boundary.width / 2;\r\n        positions.top += boundary.top - toolbarHeight;\r\n\r\n        if (boundary.top < buttonHeight) {\r\n            toolbarElement.classList.add('medium-toolbar-arrow-over');\r\n            toolbarElement.classList.remove('medium-toolbar-arrow-under');\r\n            positions.top += buttonHeight + boundary.height - this.diffTop;\r\n        } else {\r\n            toolbarElement.classList.add('medium-toolbar-arrow-under');\r\n            toolbarElement.classList.remove('medium-toolbar-arrow-over');\r\n            positions.top += this.diffTop;\r\n        }\r\n\r\n        if (middleBoundary < halfOffsetWidth) {\r\n            positions.left = defaultLeft + halfOffsetWidth;\r\n            positions.right = 'initial';\r\n        } else if ((containerWidth - middleBoundary) < halfOffsetWidth) {\r\n            positions.left = 'auto';\r\n            positions.right = 0;\r\n        } else {\r\n            positions.left = defaultLeft + middleBoundary;\r\n            positions.right = 'initial';\r\n        }\r\n\r\n        ['top', 'left', 'right'].forEach(function (key) {\r\n            toolbarElement.style[key] = positions[key] + (isNaN(positions[key]) ? '' : 'px');\r\n        });\r\n    }\r\n});\r\n"]}