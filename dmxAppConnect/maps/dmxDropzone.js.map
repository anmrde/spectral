{"version":3,"sources":["components/dropzone.js"],"names":["dmx","Component","extends","initialData","file","files","attributes","accept","type","String","default","message","thumbs","thumb-width","Number","thumb-height","methods","remove","id","this","reset","render","node","form","$node","idx","dmxExtraData","document","createElement","className","innerHTML","props","dropzone","style","cssText","classList","add","appendChild","addEventListener","click","bind","dragover","dragenter","dragleave","drop","change","dom","replace","console","warn","update","data","length","name","event","log","addFiles","target","ea","preventDefault","stopPropagation","dataTransfer","effectAllowed","e","dropEffect","items","webkitGetAsEntry","addFilesFromItems","validate","split","some","charAt","match","RegExp","test","toLowerCase","Array","isArray","forEach","thumb","set","multiple","index","findIndex","info","splice","requestUpdate","createThumb","title","setProperty","parseInt","filename","textContent","filesize","formatSize","size","number","decimals","binary","isNaN","isFinite","base","suffix","i","n","Math","pow","round","resize","src","cb","img","tWidth","tHeight","onload","canvas","ctx","getContext","sWidth","width","sHeight","height","min","tRatio","sx","sy","drawImage","toDataURL","addFile","push","date","lastModified","Date","lastModifiedDate","toISOString","dataUrl","indexOf","reader","FileReader","result","readAsDataURL","concat","array","item","entry","isFile","getAsFile","isDirectory","addFilesFromDirectory","kind","directory","path","createReader","readEntries","entries","fullPath","error"],"mappings":"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","file":"../dmxDropzone/dmxDropzone.js","sourcesContent":["dmx.Component('dropzone', {\r\n\r\n    extends: 'input',\r\n\r\n    initialData: {\r\n        file: null,\r\n        files: []\r\n    },\r\n\r\n    attributes: {\r\n        accept: {\r\n            type: String,\r\n            default: ''\r\n        },\r\n\r\n        message: {\r\n            type: String,\r\n            default: 'Drop files here or click to upload.'\r\n        },\r\n\r\n        'thumbs': {\r\n            type: String,\r\n            default: 'true'\r\n        },\r\n\r\n        'thumb-width': {\r\n            type: Number,\r\n            default: 100\r\n        },\r\n\r\n        'thumb-height': {\r\n            type: Number,\r\n            default: 100\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        remove: function(id) {\r\n            this.remove(id);\r\n        },\r\n\r\n        reset: function() {\r\n            this.reset();\r\n        }\r\n    },\r\n\r\n    render: function(node) {\r\n        this.form = this.$node.form;\r\n        this.idx = 0;\r\n\r\n        if (!this.form || !this.form.dmxExtraData) {\r\n            console.warn('Filedrop can only work on a serverconnect form!');\r\n            return;\r\n        }\r\n\r\n        this.message = document.createElement('div');\r\n        this.message.className = 'dmxDropzoneMessage';\r\n        this.message.innerHTML = this.props.message;\r\n\r\n        this.dropzone = document.createElement('div');\r\n        this.dropzone.style.cssText = this.$node.style.cssText;\r\n        this.dropzone.className = this.$node.className;\r\n        this.dropzone.classList.add('dmxDropzone');\r\n        this.dropzone.appendChild(this.message);\r\n\r\n        this.dropzone.addEventListener('click', this.click.bind(this));\r\n\r\n        this.dropzone.addEventListener('dragover', this.dragover.bind(this));\r\n        this.dropzone.addEventListener('dragenter', this.dragenter.bind(this));\r\n        this.dropzone.addEventListener('dragleave', this.dragleave.bind(this));\r\n        this.dropzone.addEventListener('drop', this.drop.bind(this));\r\n\r\n        this.$node.addEventListener('change', this.change.bind(this));\r\n\r\n        this.form.addEventListener('reset', this.reset.bind(this));\r\n\r\n        dmx.dom.replace(this.$node, this.dropzone);\r\n    },\r\n\r\n    update: function(props) {\r\n        var message = this.props.message;\r\n\r\n        if (this.data.files.length) {\r\n            message += ' (' + this.data.files.length + ' files)';\r\n        } else if (this.data.file) {\r\n            message += ' (' + this.data.file.name + ')';\r\n        }\r\n\r\n        if (this.message && this.message.innerHTML != message) {\r\n            this.message.innerHTML = message;\r\n        }\r\n    },\r\n\r\n    click: function(event) {\r\n        this.$node.click();\r\n    },\r\n\r\n    change: function(event) {\r\n        console.log('CHANGE', event, this);\r\n        this.addFiles(event.target.files);\r\n    },\r\n\r\n    dragover: function(event) {\r\n        // prevent default to allow drop\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        var ea;\r\n        try { ea = event.dataTransfer.effectAllowed; } catch(e) {}\r\n\r\n        event.dataTransfer.dropEffect = (ea == 'move' || ea == 'linkMove') ? 'move' : 'copy';\r\n    },\r\n\r\n    dragenter: function(event) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        this.dropzone.classList.add('dmxDropzoneHover');\r\n    },\r\n\r\n    dragleave: function(event) {\r\n        this.dropzone.classList.remove('dmxDropzoneHover');\r\n    },\r\n\r\n    drop: function(event) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        this.dropzone.classList.remove('dmxDropzoneHover');\r\n\r\n        if (!event.dataTransfer) return;\r\n\r\n        var files = event.dataTransfer.files;\r\n\r\n        if (files.length) {\r\n            var items = event.dataTransfer.items;\r\n\r\n            if (items && items.length && items[0].webkitGetAsEntry) {\r\n                this.addFilesFromItems(items);\r\n            } else {\r\n                this.addFiles(files);\r\n            }\r\n        }\r\n    },\r\n\r\n    validate: function(file) {\r\n        if (!this.props.accept) return true;\r\n        return this.props.accept.split(/\\s*,\\s*/g).some(function(type) {\r\n            if (type.charAt(0) == '.') {\r\n                if (file.name.match(new RegExp('\\\\' + type + '$', 'i'))) {\r\n                    return true;\r\n                }\r\n            } else if (/(audio|video|image)\\/\\*/i.test(type)) {\r\n                if (file.type.match(new RegExp('^' + type.replace(/\\*/g, '.*') + '$', 'i'))) {\r\n                    return true;\r\n                }\r\n            } else {\r\n                if (file.type.toLowerCase() == type.toLowerCase()) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        });\r\n    },\r\n\r\n    reset: function() {\r\n        if (Array.isArray(this.form.dmxExtraData[this.$node.name])) {\r\n            this.form.dmxExtraData[this.$node.name].forEach(function(file) {\r\n                if (file.thumb) file.thumb.remove();\r\n            });\r\n        } else if (this.form.dmxExtraData[this.$node.name].thumb) {\r\n            this.form.dmxExtraData[this.$node.name].thumb.remove();\r\n        }\r\n\r\n        this.form.dmxExtraData[this.$node.name] = null;\r\n        this.set('files', []);\r\n        this.set('file', null);\r\n    },\r\n\r\n    remove: function(id, event) {\r\n        if (event) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n\r\n        if (this.$node.multiple) {\r\n            var index = this.data.files.findIndex(function(info) {\r\n                return info.id == id;\r\n            });\r\n\r\n            if (index != -1) {\r\n                this.data.files.splice(index, 1);\r\n                this.form.dmxExtraData[this.$node.name][index].thumb.remove();\r\n                this.form.dmxExtraData[this.$node.name].splice(index, 1);\r\n                dmx.requestUpdate();\r\n            }\r\n        } else if (this.data.file) {\r\n            this.data.file = null;\r\n            this.form.dmxExtraData[this.$node.name].thumb.remove();\r\n            this.form.dmxExtraData[this.$node.name] = null;\r\n            dmx.requestUpdate();\r\n        }\r\n    },\r\n\r\n    createThumb: function(file) {\r\n        var thumb = document.createElement('div');\r\n        thumb.className = 'dmxDropzoneThumb';\r\n        thumb.title = file.name;\r\n        thumb.style.setProperty('width', (parseInt(this.props['thumb-width']) || 100) + 'px');\r\n        thumb.style.setProperty('height', (parseInt(this.props['thumb-height']) || 100) + 'px');\r\n        thumb.addEventListener('click', this.remove.bind(this, file.id));\r\n\r\n        var filename = document.createElement('div');\r\n        filename.className = 'dmxDropzoneFilename';\r\n        filename.textContent = file.name;\r\n        thumb.appendChild(filename);\r\n\r\n        var filesize = document.createElement('div');\r\n        filesize.className = 'dmxDropzoneFilesize';\r\n        filesize.textContent = this.formatSize(file.size);\r\n        thumb.appendChild(filesize);\r\n\r\n        file.thumb = thumb;\r\n\r\n        this.dropzone.appendChild(thumb);\r\n    },\r\n\r\n    formatSize: function(number, decimals, binary) {\r\n        if (isNaN(number) || !isFinite(number)) return 'Invalid Size';\r\n\r\n        decimals = decimals || 1;\r\n\r\n        var base = binary ? 1024 : 1000;\r\n        var suffix = binary ? ['KiB', 'MiB', 'GiB', 'TiB'] : ['KB', 'MB', 'GB', 'TB'];\r\n\r\n        for (var i = 3; i >= 0; i--) {\r\n            var n = Math.pow(base, i + 1);\r\n            if (number >= n) {\r\n                number /= n;\r\n                var pow = Math.pow(10, decimals);\r\n                number = Math.round(number * pow) / pow;\r\n                return number + suffix[i];\r\n            }\r\n        }\r\n\r\n        return number + 'B';\r\n    },\r\n\r\n    resize: function(src, cb) {\r\n        var img = document.createElement('img');\r\n\r\n        var tWidth = parseInt(this.props['thumb-width']) || 100;\r\n        var tHeight = parseInt(this.props['thumb-height']) || 100;\r\n\r\n        img.onload = function() {\r\n            var canvas = document.createElement('canvas');\r\n            var ctx = canvas.getContext('2d');\r\n\r\n            var sWidth = img.width;\r\n            var sHeight = img.height;\r\n\r\n            tWidth = Math.min(tWidth, sWidth);\r\n            tHeight = Math.min(tHeight, sHeight);\r\n\r\n            var sRatio = sWidth / sHeight;\r\n            var tRatio = tWidth / tHeight;\r\n\r\n            if (sWidth > tWidth || sHeight > tHeight) {\r\n                if (sRatio > tRatio) {\r\n                    sWidth = sHeight * tRatio;\r\n                } else {\r\n                    sHeight = sWidth / tRatio;\r\n                }\r\n            }\r\n\r\n            canvas.width = tWidth;\r\n            canvas.height = tHeight;\r\n\r\n            var sx = (img.width - sWidth) / 2;\r\n            var sy = (img.height - sHeight) / 2;\r\n\r\n            ctx.drawImage(img, sx, sy, sWidth, sHeight, 0, 0, tWidth, tHeight);\r\n\r\n            cb(canvas.toDataURL());\r\n        };\r\n        img.src = src;\r\n    },\r\n\r\n    addFile: function(file) {\r\n        if (!this.validate(file)) {\r\n            console.info('Skipping ' + file.name + ', file not valid!');\r\n            return;\r\n        }\r\n\r\n        if (this.$node.multiple) {\r\n            this.form.dmxExtraData[this.$node.name] = this.form.dmxExtraData[this.$node.name] || [];\r\n            this.form.dmxExtraData[this.$node.name].push(file);\r\n        } else {\r\n            this.remove();\r\n            this.form.dmxExtraData[this.$node.name] = file;\r\n        }\r\n\r\n        file.id = ++this.idx\r\n\r\n        var info = {\r\n            id: file.id,\r\n            date: (file.lastModified ? new Date(file.lastModified) : file.lastModifiedDate).toISOString(),\r\n            name: file.name,\r\n            size: file.size,\r\n            type: file.type,\r\n            dataUrl: null\r\n        };\r\n\r\n        if (this.props.thumbs != 'false') {\r\n            this.createThumb(file);\r\n        }\r\n\r\n        if (file.type.indexOf('image/') !== -1 && !file.reader) {\r\n            file.reader = new FileReader();\r\n\r\n            file.reader.onload = function(event) {\r\n                info.dataUrl = event.target.result;\r\n                if (file.thumb) {\r\n                    this.resize(info.dataUrl, function(dataUrl) {\r\n                        file.thumb.style.setProperty('background-image', 'url(' + dataUrl + ')');\r\n                    });\r\n                }\r\n                dmx.requestUpdate();\r\n            }.bind(this);\r\n\r\n            file.reader.readAsDataURL(file);\r\n        }\r\n\r\n        if (this.$node.multiple) {\r\n            this.set('files', this.data.files.concat([info]));\r\n        } else {\r\n            this.set('file', info);\r\n        }\r\n    },\r\n\r\n    addFiles: function(files) {\r\n        dmx.array(files).forEach(function(file) {\r\n            this.addFile(file);\r\n        }, this);\r\n    },\r\n\r\n    addFilesFromItems: function(items) {\r\n        dmx.array(items).forEach(function(item) {\r\n            var entry;\r\n            if (item.webkitGetAsEntry && (entry = item.webkitGetAsEntry())) {\r\n                if (entry.isFile) {\r\n                    this.addFile(item.getAsFile());\r\n                } else if (entry.isDirectory) {\r\n                    this.addFilesFromDirectory(entry);\r\n                }\r\n            } else if (item.getAsFile) {\r\n                if (!item.kind || item.kind == 'file') {\r\n                    this.addFile(item.getAsFile());\r\n                }\r\n            }\r\n        }, this);\r\n    },\r\n\r\n    addFilesFromDirectory: function(directory, path) {\r\n        var reader = directory.createReader();\r\n        var readEntries = function() {\r\n            reader.readEntries(function(entries) {\r\n                if (entries.length) {\r\n                    entries.forEach(function(entry) {\r\n                        if (entry.isFile) {\r\n                            entry.file(function(file) {\r\n                                file.fullPath = path + '/' + file.name;\r\n                                this.addFile(file);\r\n                            }.bind(this));\r\n                        } else if (entry.isDirectory) {\r\n                            this.addFilesFromDirectory(entry, path + '/' + entry.name);\r\n                        }\r\n                    }, this);\r\n                }\r\n\r\n                readEntries();\r\n            }.bind(this), function(error) {\r\n                console.warn(error);\r\n            }.bind(this));\r\n        }.bind(this);\r\n\r\n        readEntries();\r\n    }\r\n\r\n});\r\n"]}