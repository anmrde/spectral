{"version":3,"sources":["components/chart.js"],"names":["dmx","Component","attributes","width","type","Number","default","height","responsive","Boolean","String","colors","Array","legend","data","labels","nogrid","points","point-style","point-size","smooth","thickness","dashed","stacked","multicolor","cutout","noanimation","fullbar","colors1","colors2","colors3","colors4","colors5","colors6","colors7","colors8","colors9","render","node","this","$node","document","createElement","setAttribute","props","id","name","dom","replace","datasets","getDatasets","update","options","layout","padding","display","animation","duration","hover","animationDuration","position","scales","xAxes","gridLines","yAxes","ticks","beginAtZero","forEach","dataset","i","color","Object","assign","fill","lineTension","backgroundColor","Color","alpha","rgbaString","borderWidth","borderColor","borderDash","pointStyle","pointBackgroundColor","pointBorderColor","pointBorderWidth","pointHitRadius","pointRadius","pointHoverRadius","barPercentage","categoryPercentage","map","scale","cutoutPercentage","JSON","stringify","clone","getData","chart","destroy","Chart","needUpdate","length","prop","hasAttribute","push","label","getAttribute","dataExpression","items","repeatItems","parse","DataScope","getLabels","index"],"mappings":"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","file":"../dmxCharts/dmxCharts.js","sourcesContent":["dmx.Component('chart', {\r\n\r\n    attributes: {\r\n        width: {\r\n            type: Number,\r\n            default: 800\r\n        },\r\n\r\n        height: {\r\n            type: Number,\r\n            default: 600\r\n        },\r\n\r\n        responsive: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        type: {\r\n            type: String,\r\n            default: 'line' // line/area/bar/horizontalBar/pie/doughnut/radar/polarArea\r\n        },\r\n\r\n        colors: {\r\n            type: [String, Array],\r\n            default: 'default'\r\n        },\r\n\r\n        legend: {\r\n            type: String,\r\n            default: ''\r\n        },\r\n\r\n        data: {\r\n            type: Array,\r\n            default: []\r\n        },\r\n\r\n        labels: {\r\n            type: String,\r\n            default: ''\r\n        },\r\n\r\n        nogrid: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        points: { // line/area/radar\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'point-style': { // line/area/radar\r\n            type: String,\r\n            default: 'circle' //'circle','cross','crossRot','dash','line','rect','rectRounded','rectRot','star','triangle'\r\n        },\r\n\r\n        'point-size': { // line/area/radar\r\n            type: String,\r\n            default: 3\r\n        },\r\n\r\n        smooth: { // line/area/radar (smooth lines)\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        thickness: { // all\r\n            type: Number,\r\n            default: 1\r\n        },\r\n\r\n        dashed: { // line/area/radar\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        stacked: { // line/area/bar/horizontalBar\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        multicolor: { // bar/horizontalBar\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        cutout: { // doughnut\r\n            type: Number,\r\n            default: 50 // percent\r\n        },\r\n\r\n        noanimation: { // all\r\n            type: Boolean,\r\n            default: false // disable animations\r\n        },\r\n\r\n        fullbar: { // bar/horizontalBar\r\n            type: Boolean,\r\n            default: false // make bars full size\r\n        }\r\n    },\r\n\r\n    colors: {\r\n        default: ['#1c9f8d', '#d94712', '#2d81b9', '#1aa042', '#ad1999', '#d89515', '#d83148', '#7e2dad', '#828280', '#ad312f'],\r\n        colors1: ['#5DA5DA', '#FAA43A', '#60BD68', '#F17CB0', '#B2912F', '#B276B2', '#DECF3F', '#F15854', '#4D4D4D'],\r\n        colors2: ['#5cbae6', '#b6d957', '#fac364', '#d998cb', '#f2d249', '#93b9c6', '#ccc5a8', '#52bacc', '#98aafb'],\r\n        colors3: ['#3678b3', '#f47d0d', '#479f2f', '#ca2227', '#9068bc', '#87564b', '#da77c1' ,'#7f7f7f' ,'#bbbc26' ,'#4bbfcf'],\r\n        colors4: ['#b1c7e8', '#f8b978', '#a2df8b', '#f69795', '#c3b0d5', '#bf9b94', '#f1b5d2' ,'#c7c7c7' ,'#dbda8e' ,'#a6dae5'],\r\n        colors5: ['#3a3d79', '#66793a', '#886c32', '#7e3c39', '#764273', '#4383bd', '#db520a', '#4ba355', '#746cb0', '#636363'],\r\n        colors6: ['#5356a2', '#8ea153', '#b99d3b', '#a5484a', '#9e5293', '#76afd6', '#f38b3c', '#80c377', '#9e9ac8', '#969696'],\r\n        colors7: ['#6c70ce', '#b8ce6c', '#e2b853', '#cc606b', '#c66ebc', '#a4cae1', '#f5ac6b', '#a8d99b', '#bcbddc', '#bdbdbd'],\r\n        colors8: ['#9c9fde', '#cfda9c', '#e4ca94', '#df959b', '#d89ed5', '#c9dbef', '#f8cfa2', '#cbe9c0', '#dadaeb', '#d9d9d9'],\r\n        colors9: ['#f44336', '#8bc34a', '#03a9f4', '#ffc107', '#e91e63', '#cddc39', '#00bcd4', '#ff9800', '#9c27b0', '#009688']\r\n    },\r\n\r\n    render: function(node) {\r\n        this.$node = document.createElement('canvas');\r\n        this.$node.setAttribute('width', this.props.width);\r\n        this.$node.setAttribute('height', this.props.height);\r\n        this.$node.id = this.name;\r\n\r\n        dmx.dom.replace(node, this.$node);\r\n\r\n        if (typeof this.props.colors == 'string') {\r\n            this.props.colors = this.colors[this.props.colors] || this.colors.default;\r\n        }\r\n\r\n        this.datasets = this.getDatasets(node);\r\n\r\n        this.update({});\r\n    },\r\n\r\n    update: function(props) {\r\n        var options = {\r\n            type: this.props.type == 'area' ? 'line' : this.props.type,\r\n            options: {\r\n                responsive: this.props.responsive,\r\n                layout: { padding: 5 },\r\n                legend: { display: false }\r\n            }\r\n        };\r\n\r\n        if (typeof this.props.colors == 'string') {\r\n            this.props.colors = this.colors[this.props.colors] || this.colors.default;\r\n        }\r\n\r\n        if (this.props.noanimation) {\r\n            options.options.animation = { duration: 0 };\r\n            options.options.hover = { animationDuration: 0 };\r\n        }\r\n\r\n        if (this.props.legend) {\r\n            options.options.legend.display = true;\r\n            options.options.legend.position = this.props.legend;\r\n        }\r\n\r\n        if (this.props.type == 'line' || this.props.type == 'area') {\r\n            options.options.scales = {\r\n                xAxes: [{ gridLines: { display: !this.props.nogrid }}],\r\n                yAxes: [{ gridLines: { display: !this.props.nogrid }, stacked: this.props.stacked, ticks: { beginAtZero: true }}]\r\n            };\r\n\r\n            this.datasets.forEach(function(dataset, i) {\r\n                var color = this.props.colors[i];\r\n\r\n                Object.assign(dataset, {\r\n                    fill: this.props.type == 'area',\r\n                    lineTension: this.props.smooth ? 0.4 : 0,\r\n                    backgroundColor: Color(color).alpha(0.5).rgbaString(),\r\n                    borderWidth: +this.props.thickness,\r\n                    borderColor: color,\r\n                    borderDash: this.props.dashed ? [5,5] : [],\r\n                    pointStyle: this.props['point-style'],\r\n                    pointBackgroundColor: color,\r\n                    pointBorderColor: color,\r\n                    pointBorderWidth: 1,\r\n                    pointHitRadius: 10,\r\n                    pointRadius: this.props.points ? +this.props['point-size'] : 0,\r\n                    pointHoverRadius: +this.props['point-size']\r\n                });\r\n            }, this);\r\n        }\r\n\r\n        if (this.props.type == 'bar' || this.props.type == 'horizontalBar') {\r\n            options.options.scales = {\r\n                xAxes: [{ gridLines: { display: !this.props.nogrid }, stacked: this.props.stacked, ticks: { beginAtZero: true }, barPercentage: this.props.fullbar ? 1 : .9, categoryPercentage: this.props.fullbar ? 1 : .8 }],\r\n                yAxes: [{ gridLines: { display: !this.props.nogrid }, stacked: this.props.stacked, ticks: { beginAtZero: true }, barPercentage: this.props.fullbar ? 1 : .9, categoryPercentage: this.props.fullbar ? 1 : .8 }]\r\n            };\r\n\r\n            this.datasets.forEach(function(dataset, i) {\r\n                var color = this.props.colors[i];\r\n\r\n                Object.assign(dataset, {\r\n                    backgroundColor: this.props.multicolor ? this.props.colors.map(function(color) { return Color(color).alpha(0.5).rgbaString(); }) : Color(color).alpha(0.5).rgbaString(),\r\n                    borderColor: this.props.multicolor ? this.props.colors : color,\r\n                    borderDash: this.props.dashed ? [5,5] : [],\r\n                    borderWidth: +this.props.thickness\r\n                });\r\n            }, this);\r\n        }\r\n\r\n        if (this.props.type == 'polarArea' || this.props.type == 'radar') {\r\n            options.options.scale = { gridLines: { display: !this.props.nogrid }, ticks: { beginAtZero: true } };\r\n\r\n            this.datasets.forEach(function(dataset, i) {\r\n                var color = this.props.colors[i];\r\n\r\n                Object.assign(dataset, {\r\n                    fill: true,\r\n                    lineTension: this.props.smooth ? 0.4 : 0,\r\n                    borderWidth: +this.props.thickness,\r\n                    borderDash: this.props.dashed ? [5,5] : [],\r\n                    borderColor: this.props.type == 'polarArea' ? this.props.colors : color,\r\n                    backgroundColor: this.props.type == 'polarArea' ? this.props.colors.map(function(color) { return Color(color).alpha(0.3).rgbaString(); }) : Color(color).alpha(0.3).rgbaString(),\r\n                    pointStyle: this.props['point-style'],\r\n                    pointBackgroundColor: this.props.type == 'polarArea' ? this.props.colors : color,\r\n                    pointBorderColor: this.props.type == 'polarArea' ? this.props.colors : color,\r\n                    pointBorderWidth: 1,\r\n                    pointHitRadius: 10,\r\n                    pointRadius: this.props.points ? +this.props['point-size'] : 0,\r\n                    pointHoverRadius: +this.props['point-size']\r\n                });\r\n            }, this);\r\n        }\r\n\r\n        if (this.props.type == 'pie' || this.props.type == 'doughnut') {\r\n          this.datasets.forEach(function(dataset, i) {\r\n              var color = this.props.colors[i];\r\n\r\n              Object.assign(dataset, {\r\n                  backgroundColor: this.props.colors.map(function(color) { return Color(color).alpha(0.5).rgbaString() }),\r\n                  borderColor: this.props.colors,\r\n                  borderWidth: +this.props.thickness,\r\n              });\r\n          }, this);\r\n        }\r\n\r\n        if (this.props.type == 'doughnut') {\r\n            options.options.cutoutPercentage = this.props.cutout;\r\n        }\r\n\r\n        if (JSON.stringify(options) != JSON.stringify(this.options)) {\r\n            if (this.props.type) {\r\n                this.options = dmx.clone(options);\r\n\r\n                options.data = this.getData();\r\n\r\n                if (this.chart) this.chart.destroy();\r\n                this.chart = new Chart(this.$node, dmx.clone(options));\r\n            }\r\n        } else if (this.chart) {\r\n            var data = this.getData();\r\n            var needUpdate = false;\r\n\r\n            if (JSON.stringify(this.chart.data.labels) != JSON.stringify(data.labels)) {\r\n                this.chart.data.labels = data.labels;\r\n                needUpdate = true;\r\n            }\r\n\r\n            if (data.datasets.length != this.chart.data.datasets.length) {\r\n                this.chart.data.datasets = data.datasets;\r\n                needUpdate = true;\r\n            } else {\r\n                data.datasets.forEach(function(dataset, i) {\r\n                    ['label', 'backgroundColor', 'borderColor', 'borderWidth', 'dataExpression', 'data'].forEach(function(prop) {\r\n                        if (JSON.stringify(this.chart.data.datasets[i][prop]) != JSON.stringify(dataset[prop])) {\r\n                            this.chart.data.datasets[i][prop] = dataset[prop];\r\n                            needUpdate = true;\r\n                        }\r\n                    }, this);\r\n                }, this);\r\n            }\r\n\r\n            if (needUpdate) {\r\n                this.chart.update();\r\n            }\r\n        }\r\n    },\r\n\r\n    getDatasets: function(node) {\r\n        var datasets = [];\r\n\r\n        for (var i = 1; i <= 9; i++) {\r\n            if (node.hasAttribute('dataset-' + i + ':value')) {\r\n                datasets.push({\r\n                    label: node.hasAttribute('dataset-' + i + ':label') ? node.getAttribute('dataset-' + i + ':label') : 'dataset ' + i,\r\n                    backgroundColor: this.props.colors.map(function(color) { return Color(color).alpha(0.5).rgbaString() }),\r\n                    borderColor: this.props.colors,\r\n                    borderWidth: 1,\r\n                    dataExpression: node.getAttribute('dataset-' + i + ':value'),\r\n                    data: []\r\n                });\r\n            }\r\n        }\r\n\r\n        return datasets;\r\n    },\r\n\r\n    getData: function() {\r\n        this.datasets.map(function(dataset) {\r\n            var items = dmx.repeatItems(this.props.data);\r\n\r\n            dataset.data = items.map(function(data) {\r\n                return +dmx.parse(dataset.dataExpression, new dmx.DataScope(data));\r\n            });\r\n\r\n            return [];\r\n        }, this);\r\n\r\n        return {\r\n            labels: this.getLabels(),\r\n            datasets: this.datasets\r\n        };\r\n    },\r\n\r\n    getLabels: function() {\r\n        var items = dmx.repeatItems(this.props.data);\r\n\r\n        return items.map(function(data, index) {\r\n            if (this.props.labels) {\r\n                return dmx.parse(this.props.labels, new dmx.DataScope(data));\r\n            } else {\r\n                return 'value ' + (index + 1);\r\n            }\r\n        }, this);\r\n    }\r\n\r\n});\r\n"]}