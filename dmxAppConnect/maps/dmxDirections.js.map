{"version":3,"sources":["components/directions.js"],"names":["dmx","Component","initialData","routeIndex","routes","attributes","map","type","String","default","start","end","travel-mode","unit-system","departure-time","Date","arrival-time","transit-modes","Array","transit-preference","provide-alternatives","Boolean","avoid-ferries","avoid-highways","avoid-tolls","methods","route","this","setRouteIndex","index","directions","set","renderer","render","node","service","google","maps","DirectionsService","DirectionsRenderer","target","props","document","getElementById","update","request","origin","destination","travelMode","TravelMode","unitSystem","UnitSystem","provideRouteAlternatives","avoidFerries","avoidHighways","avoidTolls","transitOptions","arrivalTime","departureTime","isArray","modes","routingPreference","drivingOptions","updateRoute","bind","status","setMap","dmxComponent","setDirections","copyrights","summary","arrivalDate","legs","arrival_time","value","toISOString","departureDate","departure_time","arrival","text","departure","distance","duration","start_address","end_address","steps","step","transit","stop","arrival_stop","name","date","time","departure_stop","headsign","numStops","num_stops","line","instructions","maneuver","travel_mode","console","warn"],"mappings":"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","file":"../dmxDirections/dmxDirections.js","sourcesContent":["dmx.Component('directions', {\r\n\r\n    initialData: {\r\n        routeIndex: 0,\r\n        routes: []\r\n    },\r\n\r\n    attributes: {\r\n        map: { // required\r\n            type: String,\r\n            default: null\r\n        },\r\n\r\n        start: { // required\r\n            type: String,\r\n            default: null\r\n        },\r\n\r\n        end: { // required\r\n            type: String,\r\n            default: null\r\n        },\r\n\r\n        'travel-mode': {\r\n            type: String,\r\n            default: 'DRIVING' // DRIVING, WALKING, BICYCLING, TRANSIT\r\n        },\r\n\r\n        'unit-system': {\r\n            type: String,\r\n            default: 'METRIC' // METRIC, IMPERIAL\r\n        },\r\n\r\n        'departure-time': {\r\n            type: Date,\r\n            default: null\r\n        },\r\n\r\n        'arrival-time': {\r\n            type: Date,\r\n            default: null\r\n        },\r\n\r\n        'transit-modes': {\r\n            type: Array,\r\n            default: null // BUS, RAIL, SUBWAY, TRAIN, TRAM\r\n        },\r\n\r\n        'transit-preference': {\r\n            type: String,\r\n            default: null // FEWER_TRANSFERS, LESS_WALKING\r\n        },\r\n\r\n        'provide-alternatives': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'avoid-ferries': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'avoid-highways': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'avoid-tolls': {\r\n            type: Boolean,\r\n            default: false\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        route: function() {\r\n            this.route();\r\n        },\r\n\r\n        setRouteIndex: function(index) {\r\n            if (this.directions) {\r\n                this.set('routeIndex', index);\r\n                this.renderer.setRouteIndex(index);\r\n            }\r\n        }\r\n    },\r\n\r\n    render: function(node) {\r\n        this.service = new google.maps.DirectionsService();\r\n        this.renderer = new google.maps.DirectionsRenderer();\r\n        this.target = this.props.map && document.getElementById(this.props.map);\r\n    },\r\n\r\n    update: function(props) {\r\n    },\r\n\r\n    route: function() {\r\n        var request = {\r\n            origin: this.props.start,\r\n            destination: this.props.end,\r\n            travelMode: google.maps.TravelMode[this.props['travel-mode']],\r\n            unitSystem: google.maps.UnitSystem[this.props['unit-system']],\r\n            provideRouteAlternatives: this.props['provide-alternatives'],\r\n            avoidFerries: this.props['avoid-ferries'],\r\n            avoidHighways: this.props['avoid-highways'],\r\n            avoidTolls: this.props['avoid-tolls']\r\n        };\r\n\r\n        if (this.props['travel-mode'] == 'TRANSIT') {\r\n            request.transitOptions = {};\r\n\r\n            if (this.props['arrival-time']) {\r\n                request.transitOptions.arrivalTime = new Date(this.props['arrival-time']);\r\n            }\r\n\r\n            if (this.props['departure-time']) {\r\n                request.transitOptions.departureTime = new Date(this.props['departure-time']);\r\n            }\r\n\r\n            if (Array.isArray(this.props['transit-modes'])) {\r\n                request.transitOptions.modes = this.props['transit-modes'];\r\n            }\r\n\r\n            if (this.props['transit-preference']) {\r\n                request.transitOptions.routingPreference = this.props['transit-preference'];\r\n            }\r\n        }\r\n\r\n        if (this.props['travel-mode'] == 'DRIVING') {\r\n            if (this.props['departure-time']) {\r\n                request.drivingOptions.departureTime = new Date(this.props['departure-time']);\r\n            }\r\n        }\r\n\r\n        this.service.route(request, this.updateRoute.bind(this));\r\n    },\r\n\r\n    updateRoute: function(directions, status) {\r\n        this.set('routeIndex', 0);\r\n\r\n        if (status == 'OK') {\r\n            this.directions = directions;\r\n            this.renderer.setMap(this.target.dmxComponent.map);\r\n            this.renderer.setDirections(directions);\r\n\r\n            this.set('routes', directions.routes.map(function(route, index) {\r\n                return {\r\n                    index: index,\r\n                    copyrights: route.copyrights,\r\n                    summary: route.summary,\r\n                    arrivalDate: route.legs[0].arrival_time && route.legs[0].arrival_time.value.toISOString(),\r\n                    departureDate: route.legs[0].departure_time && route.legs[0].departure_time.value.toISOString(),\r\n                    arrival: route.legs[0].arrival_time && route.legs[0].arrival_time.text,\r\n                    departure: route.legs[0].departure_time && route.legs[0].departure_time.text,\r\n                    distance: route.legs[0].distance.text,\r\n                    duration: route.legs[0].duration.text,\r\n                    start: route.legs[0].start_address,\r\n                    end: route.legs[0].end_address,\r\n                    steps: route.legs[0].steps.map(function(step) {\r\n                        var transit = {};\r\n\r\n                        if (step.transit) {\r\n                            transit.arrival = {\r\n                              stop: step.transit.arrival_stop.name,\r\n                              date: step.transit.arrival_time.value.toISOString(),\r\n                              time: step.transit.arrival_time.text\r\n                            };\r\n                            transit.departure = {\r\n                              stop: step.transit.departure_stop.name,\r\n                              date: step.transit.departure_time.value.toISOString(),\r\n                              time: step.transit.departure_time.text\r\n                            };\r\n                            transit.headsign = step.transit.headsign;\r\n                            transit.numStops = step.transit.num_stops;\r\n                            transit.line = step.transit.line;\r\n                        }\r\n\r\n                        return {\r\n                            distance: step.distance.text,\r\n                            duration: step.duration.text,\r\n                            instructions: step.instructions,\r\n                            maneuver: step.maneuver,\r\n                            travelMode: step.travel_mode,\r\n                            transit: transit\r\n                        };\r\n                    })\r\n                }\r\n            }));\r\n        } else {\r\n            console.warn(status);\r\n            this.directions = null;\r\n            this.set('routes', []);\r\n        }\r\n    }\r\n\r\n});\r\n"]}